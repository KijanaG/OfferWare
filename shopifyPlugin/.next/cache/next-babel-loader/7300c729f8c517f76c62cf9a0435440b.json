{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst dotenv = require('dotenv');\n\nconst AWS = require('aws-sdk');\n\ndotenv.config();\nAWS.config.update({\n  region: 'us-west-2',\n  credentials: {\n    accessKeyId: process.env.accessKeyId,\n    secretAccessKey: process.env.secretAccessKey\n  }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\nexport default (async (req, res) => {\n  const {\n    shopOrigin\n  } = req.cookies;\n  res.setHeader('Content-Type', 'application/json');\n  let success = null;\n\n  switch (req.method) {\n    case 'GET':\n      let fetchedProducts = await fetchProductsFromDB(shopOrigin);\n      res.status(200).json({\n        data: fetchedProducts\n      });\n      break;\n\n    case 'POST':\n      let postProducts = req.body.products.map(prod => {\n        delete prod.__typename;\n        delete prod.handle;\n        let images = prod.images.edges.map(img => {\n          delete img.__typename;\n          delete img.node.__typename;\n          return img.node;\n        });\n        prod.images = images;\n        prod.shopOrigin = shopOrigin;\n        return prod;\n      });\n      success = await postProductsToDB(postProducts, 'POST');\n      res.status(200).json({\n        success\n      });\n      break;\n\n    case 'PUT':\n      success = await postProductsToDB([req.body.product], 'PUT');\n      res.status(200).json({\n        success\n      });\n      break;\n\n    default:\n      res.setHeader('Allow', ['GET', 'POST']);\n      res.status(405).end(`Method ${method} Not Allowed.`);\n      break;\n  }\n});\n\nasync function fetchProductsFromDB(shopOrigin, count = 0) {\n  const params = {\n    TableName: 'Shopify_Products',\n    FilterExpression: \"shopOrigin = :shop\",\n    ExpressionAttributeValues: {\n      ':shop': shopOrigin\n    }\n  };\n  const awsRequest = await docClient.scan(params);\n  const result = await awsRequest.promise();\n  if (result.Items.length > 0) return result.Items;else {\n    if (count == 5) return null;\n    await fetchProductsFromDB(shopOrigin, ++count);\n  }\n}\n\nasync function postProductsToDB(products, method, count = 0) {\n  if (products.length == 0) return true;\n\n  let Item = _objectSpread({}, products[products.length - 1]);\n\n  if (method == 'POST') {\n    Item = _objectSpread({}, Item, {\n      streetAddress: null,\n      city: null,\n      zipCode: null,\n      state: null,\n      businessName: null,\n      merchantDescription: null,\n      email: null\n    });\n  }\n\n  const params = {\n    TableName: 'Shopify_Products',\n    Item\n  };\n  docClient.put(params, async (err, data) => {\n    if (err) {\n      console.log(err);\n      if (count == 5) return false;\n      await postProductsToDB(products, method, ++count);\n    } else {\n      if (products.length > 0) {\n        products.pop();\n        await postProductsToDB(products, method, count);\n      }\n\n      return true;\n    }\n  });\n}","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/pages/api/products/index.js"],"names":["dotenv","require","AWS","config","update","region","credentials","accessKeyId","process","env","secretAccessKey","docClient","DynamoDB","DocumentClient","req","res","shopOrigin","cookies","setHeader","success","method","fetchedProducts","fetchProductsFromDB","status","json","data","postProducts","body","products","map","prod","__typename","handle","images","edges","img","node","postProductsToDB","product","end","count","params","TableName","FilterExpression","ExpressionAttributeValues","awsRequest","scan","result","promise","Items","length","Item","streetAddress","city","zipCode","state","businessName","merchantDescription","email","put","err","console","log","pop"],"mappings":"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","sourcesContent":["const dotenv = require('dotenv');\nconst AWS = require('aws-sdk');\ndotenv.config();\nAWS.config.update({\n    region: 'us-west-2', credentials: {\n        accessKeyId: process.env.accessKeyId,\n        secretAccessKey: process.env.secretAccessKey\n    }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\n\nexport default async (req, res) => {\n    const { shopOrigin } = req.cookies;\n    res.setHeader('Content-Type', 'application/json')\n    let success = null;\n    switch (req.method) {\n        case 'GET':\n            let fetchedProducts = await fetchProductsFromDB(shopOrigin)\n            res.status(200).json({ data: fetchedProducts });\n            break;\n        case 'POST':\n            let postProducts = req.body.products.map(prod => {\n                delete prod.__typename;\n                delete prod.handle;\n                let images = prod.images.edges.map(img => {\n                    delete img.__typename;\n                    delete img.node.__typename;\n                    return img.node;\n                })\n                prod.images = images;\n                prod.shopOrigin = shopOrigin;\n                return prod\n            })\n            success = await postProductsToDB(postProducts, 'POST')\n            res.status(200).json({ success });\n            break;\n        case 'PUT':\n            success = await postProductsToDB([req.body.product], 'PUT')\n            res.status(200).json({ success })\n            break;\n        default:\n            res.setHeader('Allow', ['GET', 'POST'])\n            res.status(405).end(`Method ${method} Not Allowed.`)\n            break;\n    }\n}\n\nasync function fetchProductsFromDB(shopOrigin, count = 0) {\n    const params = {\n        TableName: 'Shopify_Products',\n        FilterExpression: \"shopOrigin = :shop\",\n        ExpressionAttributeValues: { ':shop': shopOrigin }\n    }\n    const awsRequest = await docClient.scan(params);\n    const result = await awsRequest.promise();\n    if (result.Items.length > 0)\n        return result.Items;\n    else {\n        if (count == 5) return null\n        await fetchProductsFromDB(shopOrigin, ++count)\n    }\n}\n\nasync function postProductsToDB(products, method, count = 0) {\n    if (products.length == 0) return true;\n    let Item = { ...products[products.length - 1] }\n    if (method == 'POST') {\n        Item = {\n            ...Item, streetAddress: null, city: null, zipCode: null, state: null,\n            businessName: null, merchantDescription: null, email: null\n        }\n    }\n    const params = { TableName: 'Shopify_Products', Item }\n    docClient.put(params, async (err, data) => {\n        if (err) {\n            console.log(err)\n            if (count == 5) return false;\n            await postProductsToDB(products, method, ++count)\n        } else {\n            if (products.length > 0) {\n                products.pop();\n                await postProductsToDB(products, method, count)\n            }\n            return true\n        }\n    })\n}"]},"metadata":{},"sourceType":"module"}