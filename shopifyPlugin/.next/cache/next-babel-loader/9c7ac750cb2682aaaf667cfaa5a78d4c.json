{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail, Button, Form } from '@shopify/polaris';\nimport store from 'store-js';\nimport axios from 'axios';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      updating: {}\n    });\n\n    _defineProperty(this, \"handleUpload\", (id, index) => {\n      let updating = this.state.updating;\n      updating[id] = true;\n      this.setState({\n        updating: updating\n      });\n    });\n\n    _defineProperty(this, \"postProductToDB\", product => {\n      console.log(\"CALLED\");\n      axios.patch('/api/products', {\n        product\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(async res => {\n        let updating = this.state.updating;\n        delete updating[product.id];\n        this.setState({\n          updating: updating\n        });\n        await this.props.fetchProducts();\n      }).catch(err => {\n        alert(\"Something went wrong, plase refresh page.\");\n      });\n    });\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    return __jsx(Card, null, __jsx(ResourceList, {\n      showHeader: true,\n      resourceName: {\n        singular: 'Product',\n        plural: 'Products'\n      },\n      items: this.props.products,\n      renderItem: (item, _, indx) => {\n        let complete = false;\n\n        if (item.streetAddress && item.city && item.email && item.zipCode && item.state && item.businessName && item.merchantDescription) {\n          complete = true;\n        }\n\n        const media = __jsx(Thumbnail, {\n          source: item.images[0] ? item.images[0].originalSrc : '',\n          alt: item.images[0] ? item.images[0].altText : ''\n        });\n\n        return __jsx(ResourceList.Item, {\n          id: item.id,\n          media: media,\n          accessibilityLabel: `View details for ${item.title}`,\n          onClick: () => {}\n        }, __jsx(Stack, null, __jsx(Stack.Item, {\n          fill: true\n        }, __jsx(\"h3\", null, \" \", __jsx(TextStyle, {\n          variation: \"strong\"\n        }, \" \", item.title, \" \"), \" \")), __jsx(Stack.Item, null, this.state.updating[item.id] ? __jsx(Query, {\n          query: GET_PRODUCT_BY_ID,\n          variables: {\n            id: [item.id]\n          }\n        }, ({\n          data,\n          loading,\n          error\n        }) => {\n          // console.log(data, loading, error)\n          if (error) return __jsx(TextStyle, null, error.message);\n          if (data) this.postProductToDB(data.nodes[0]);\n          return __jsx(Button, {\n            loading: this.state.updating[item.id],\n            primary: true\n          }, \"Update Item\");\n        }) : __jsx(Form, {\n          onSubmit: () => this.handleUpload(item.id, indx),\n          preventDefault: true\n        }, __jsx(Button, {\n          loading: false,\n          submit: true,\n          primary: true\n        }, \"Update Item\")), \"\\xA0 12/30 \\xA0\", __jsx(\"div\", {\n          style: {\n            color: complete ? \"green\" : \"red\"\n          }\n        }, __jsx(Button, {\n          monochrome: true,\n          outline: true,\n          onClick: () => {\n            store.set('product', item);\n            redirectToProduct();\n          }\n        }, complete ? \"Complete\" : \"Incomplete\", \" \")))));\n      }\n    }));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;\nconst GET_PRODUCT_BY_ID = gql`\n  query getProducts($id: [ID!]!) {\n    nodes(ids: $id) {\n      ... on Product {\n        title\n        descriptionHtml\n        id\n        variants(first:4){\n          edges{\n            node{\n              compareAtPrice\n              price\n              title\n            }\n          }\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/components/ResourceList.js"],"names":["Card","ResourceList","Stack","TextStyle","Thumbnail","Button","Form","store","axios","Redirect","Context","gql","Query","ResourceListWithProducts","React","Component","updating","id","index","state","setState","product","console","log","patch","headers","then","res","props","fetchProducts","catch","err","alert","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","singular","plural","products","item","_","indx","complete","streetAddress","city","email","zipCode","businessName","merchantDescription","media","images","originalSrc","altText","title","GET_PRODUCT_BY_ID","data","loading","error","message","postProductToDB","nodes","handleUpload","color","set"],"mappings":"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","sourcesContent":["import { Card, ResourceList, Stack, TextStyle, Thumbnail, Button, Form } from '@shopify/polaris';\nimport store from 'store-js';\nimport axios from 'axios';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nclass ResourceListWithProducts extends React.Component {\n    state = {\n        updating: {},\n    }\n    static contextType = Context;\n    handleUpload = (id, index) => {\n        let updating = this.state.updating;\n        updating[id] = true\n        this.setState({ updating: updating })\n    }\n    render() {\n        const app = this.context;\n        const redirectToProduct = () => {\n            const redirect = Redirect.create(app);\n            redirect.dispatch(\n                Redirect.Action.APP,\n                '/edit-products',\n            )\n        }\n        return (\n            <Card>\n                <ResourceList showHeader resourceName={{ singular: 'Product', plural: 'Products' }}\n                    items={this.props.products}\n                    renderItem={(item, _, indx) => {\n                        let complete = false;\n                        if (item.streetAddress && item.city && item.email && item.zipCode\n                            && item.state && item.businessName && item.merchantDescription) {\n                            complete = true\n                        }\n                        const media = (\n                            <Thumbnail\n                                source={item.images[0] ? item.images[0].originalSrc : ''}\n                                alt={item.images[0] ? item.images[0].altText : ''} />\n                        );\n                        return (\n                            <ResourceList.Item id={item.id} media={media}\n                                accessibilityLabel={`View details for ${item.title}`}\n                                onClick={() => { }}>\n                                <Stack>\n                                    <Stack.Item fill>\n                                        <h3> <TextStyle variation=\"strong\"> {item.title} </TextStyle> </h3>\n                                    </Stack.Item>\n                                    <Stack.Item>\n                                        {this.state.updating[item.id] ?\n                                            <Query query={GET_PRODUCT_BY_ID} variables={{ id: [item.id] }}>\n                                                {({ data, loading, error }) => {\n                                                    // console.log(data, loading, error)\n                                                    if (error) return <TextStyle>{error.message}</TextStyle>\n                                                    if (data) this.postProductToDB(data.nodes[0])\n                                                    return <Button loading={this.state.updating[item.id]} primary>Update Item</Button>\n                                                }}\n                                            </Query>\n                                            :\n                                            <Form onSubmit={() => this.handleUpload(item.id, indx)} preventDefault={true}>\n                                                <Button loading={false} submit primary>Update Item</Button>\n                                            </Form>\n                                        }\n                                    &nbsp; 12/30 &nbsp;\n                                    <div style={{ color: complete ? \"green\" : \"red\" }}>\n                                            <Button monochrome outline onClick={() => { store.set('product', item); redirectToProduct(); }}>{complete ? \"Complete\" : \"Incomplete\"} </Button>\n                                        </div>\n                                    </Stack.Item>\n                                </Stack>\n                            </ResourceList.Item>\n                        );\n                    }}\n                />\n            </Card>\n        );\n    }\n    postProductToDB = (product) => {\n        console.log(\"CALLED\")\n        axios.patch('/api/products', { product }, {\n            headers: { \"Content-Type\": \"application/json\" }\n        }).then(async res => {\n            let updating = this.state.updating;\n            delete updating[product.id]\n            this.setState({updating: updating})\n            await this.props.fetchProducts()\n        }).catch(err => {\n            alert(\"Something went wrong, plase refresh page.\")\n        })\n    }\n}\n\nexport default ResourceListWithProducts;\n\nconst GET_PRODUCT_BY_ID = gql`\n  query getProducts($id: [ID!]!) {\n    nodes(ids: $id) {\n      ... on Product {\n        title\n        descriptionHtml\n        id\n        variants(first:4){\n          edges{\n            node{\n              compareAtPrice\n              price\n              title\n            }\n          }\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n`;"]},"metadata":{},"sourceType":"module"}