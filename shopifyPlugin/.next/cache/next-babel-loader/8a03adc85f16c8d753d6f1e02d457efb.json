{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Page, Layout, TextStyle, EmptyState, Spinner } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport ResourceListWithProducts from '../components/ResourceList';\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nclass Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      open: false,\n      loadingDB: true,\n      products: null,\n      productIDs: null\n    });\n\n    _defineProperty(this, \"postNewProductsToDB\", async products => {\n      console.log(\"******\", products, \"********\");\n      let fetchedProducts = await this.fetchProducts();\n      this.setState({\n        products: fetchedProducts\n      });\n    });\n\n    _defineProperty(this, \"handleSelection\", async resources => {\n      const idsFromResources = resources.selection.map(product => product);\n      this.setState({\n        open: false\n      });\n      console.log(idsFromResources); // await getProducts(idsFromResources)\n\n      this.setState({\n        productIDs: idsFromResources\n      }); // store.set('ids', idsFromResources)\n    });\n\n    _defineProperty(this, \"fetchProducts\", async () => {\n      console.log(\"IN Here fetchProducts()\");\n      return await fetch('/api/products').then(res => res.json()).then(response => {\n        return response;\n      }).catch(err => {\n        alert(err);\n        return null;\n      });\n    });\n  }\n\n  async componentDidMount() {\n    console.log(\"Did MOUNT\");\n    let products = await this.fetchProducts();\n    console.log(\"PRODUCTS: \", products);\n    if (products.data == \"Delicious panther\") //IF not products , show \n      //Set products in state\n      this.setState({\n        loadingDB: false\n      });\n  }\n\n  componentWillUnmount() {\n    console.log(\"UNMOUNTINGIGNIG\");\n  }\n\n  render() {\n    const emptyState = this.state.products;\n    const {\n      loadingDB,\n      productIDs\n    } = this.state;\n    if (loadingDB) return (//Fetching Products from Database\n      __jsx(Page, null, __jsx(Layout, null, __jsx(EmptyState, {\n        centeredLayout: true,\n        heading: 'Adding Specified Products to Database...'\n      }, __jsx(Query, {\n        query: GET_PRODUCTS_BY_ID,\n        variables: {\n          ids: productIDs\n        }\n      }, ({\n        data,\n        loading,\n        error\n      }) => {\n        if (loading) return __jsx(Spinner, {\n          accessibilityLabel: \"Spinner\",\n          size: \"large\",\n          color: \"inkLightest\"\n        });\n        if (error) return __jsx(\"div\", null, error.message);else {\n          console.log(\"GOT DATA\", data);\n          this.postNewProductsToDB(data);\n          return __jsx(Spinner, {\n            accessibilityLabel: \"Spinner\",\n            size: \"large\",\n            color: \"inkLightest\"\n          });\n        }\n      }))))\n    );\n\n    if (productIDs) {\n      //If exists, user gave Voucher functionality to these products\n      __jsx(Page, null, __jsx(Layout, null, __jsx(EmptyState, {\n        centeredLayout: true,\n        heading: 'Fetching Products from Database...'\n      }, __jsx(Spinner, {\n        accessibilityLabel: \"Spinner\",\n        size: \"large\",\n        color: \"inkLightest\"\n      }))));\n    }\n\n    return __jsx(Page, null, __jsx(TitleBar, {\n      primaryAction: {\n        content: 'Select services',\n        onAction: () => this.setState({\n          open: true\n        })\n      }\n    }), __jsx(ResourcePicker, {\n      resourceType: \"Product\",\n      showVariants: false,\n      open: this.state.open,\n      onSelection: resources => this.handleSelection(resources),\n      onCancel: () => this.setState({\n        open: false\n      })\n    }), emptyState ? __jsx(Layout, null, __jsx(EmptyState, {\n      heading: \"Send Vouchers to your customers to be redeemed in-store.\",\n      action: {\n        content: 'Select Services',\n        onAction: () => this.setState({\n          open: true\n        })\n      },\n      image: img\n    }, __jsx(\"p\", null, \"Select products/services for which to send vouchers to customers via email.\"))) : __jsx(ResourceListWithProducts, null));\n  }\n\n}\n\nexport default Index;\n\nasync function getProducts(idsFromResources) {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PRODUCTS_BY_ID, {\n    variables: {\n      ids: idsFromResources\n    }\n  });\n  console.log(loading, error, data, \"HELOO BOOIOIOIO we out here\");\n}\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/pages/index.js"],"names":["Page","Layout","TextStyle","EmptyState","Spinner","ResourcePicker","TitleBar","store","gql","Query","ResourceListWithProducts","img","Index","React","Component","open","loadingDB","products","productIDs","console","log","fetchedProducts","fetchProducts","setState","resources","idsFromResources","selection","map","product","fetch","then","res","json","response","catch","err","alert","componentDidMount","data","componentWillUnmount","render","emptyState","state","GET_PRODUCTS_BY_ID","ids","loading","error","message","postNewProductsToDB","content","onAction","handleSelection","getProducts","useQuery","variables"],"mappings":"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","sourcesContent":["import { Page, Layout, TextStyle, EmptyState, Spinner } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport ResourceListWithProducts from '../components/ResourceList';\n\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nclass Index extends React.Component {\n    state = { open: false, loadingDB: true, products: null, productIDs: null };\n\n    async componentDidMount() {\n        console.log(\"Did MOUNT\")\n        let products = await this.fetchProducts();\n        console.log(\"PRODUCTS: \", products)\n        if (products.data == \"Delicious panther\") //IF not products , show \n            //Set products in state\n            this.setState({ loadingDB: false })\n    }\n\n    componentWillUnmount() {\n        console.log(\"UNMOUNTINGIGNIG\")\n    }\n    render() {\n        const emptyState = this.state.products;\n        const { loadingDB, productIDs } = this.state;\n        if (loadingDB) return ( //Fetching Products from Database\n            <Page>\n                <Layout>\n                    <EmptyState centeredLayout heading={'Adding Specified Products to Database...'}>\n                        <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: productIDs }}>\n                            {({ data, loading, error }) => {\n                                if (loading) return <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />;\n                                if (error) return <div>{error.message}</div>\n                                else {\n                                    console.log(\"GOT DATA\", data)\n                                    this.postNewProductsToDB(data);\n                                    return <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />;\n                                }\n                            }}\n                        </Query>\n                    </EmptyState>\n                </Layout>\n            </Page>\n        )\n        if (productIDs) { //If exists, user gave Voucher functionality to these products\n            <Page>\n                <Layout>\n                    <EmptyState centeredLayout heading={'Fetching Products from Database...'}>\n                        <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />\n                    </EmptyState>\n                </Layout>\n            </Page>\n        }\n        return (\n            <Page>\n                <TitleBar\n                    primaryAction={{\n                        content: 'Select services',\n                        onAction: () => this.setState({ open: true })\n                    }} />\n                <ResourcePicker\n                    resourceType=\"Product\"\n                    showVariants={false}\n                    open={this.state.open}\n                    onSelection={(resources) => this.handleSelection(resources)}\n                    onCancel={() => this.setState({ open: false })}\n                />\n                {emptyState ? (\n                    <Layout>\n                        {/* <TextStyle variation=\"positive\">Let's get this BREAD AAASSSAAAPPP</TextStyle> */}\n                        <EmptyState\n                            heading=\"Send Vouchers to your customers to be redeemed in-store.\"\n                            action={{\n                                content: 'Select Services',\n                                onAction: () => this.setState({ open: true })\n                            }}\n                            image={img}>\n                            <p>Select products/services for which to send vouchers to customers via email.</p>\n                        </EmptyState>\n                    </Layout>\n                ) : (\n                        <ResourceListWithProducts />\n                    )}\n            </Page>\n        );\n    }\n\n    postNewProductsToDB = async (products) => {\n        console.log(\"******\", products, \"********\")\n        let fetchedProducts = await this.fetchProducts();\n        this.setState({ products: fetchedProducts })\n    }\n    handleSelection = async (resources) => {\n        const idsFromResources = resources.selection.map((product) => product)\n        this.setState({ open: false })\n        console.log(idsFromResources)\n        // await getProducts(idsFromResources)\n        this.setState({ productIDs: idsFromResources })\n        // store.set('ids', idsFromResources)\n    }\n    fetchProducts = async () => {\n        console.log(\"IN Here fetchProducts()\")\n        return await fetch('/api/products')\n            .then(res => res.json())\n            .then(response => {\n                return response\n            })\n            .catch(err => {\n                alert(err)\n                return null\n            })\n    }\n}\n\nexport default Index;\n\nasync function getProducts(idsFromResources) {\n    const { loading, error, data } = useQuery(GET_PRODUCTS_BY_ID, { variables: { ids: idsFromResources } })\n    console.log(loading, error, data, \"HELOO BOOIOIOIO we out here\")\n}\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}