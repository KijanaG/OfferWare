{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst dotenv = require('dotenv');\n\nconst AWS = require('aws-sdk');\n\ndotenv.config();\nAWS.config.update({\n  region: 'us-west-2',\n  credentials: {\n    accessKeyId: process.env.accessKeyId,\n    secretAccessKey: process.env.secretAccessKey\n  }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\nexport default (async (req, res) => {\n  const {\n    shopOrigin\n  } = req.cookies;\n  res.setHeader('Content-Type', 'application/json');\n\n  switch (req.method) {\n    case 'GET':\n      let fetchedProducts = await fetchProductsFromDB(shopOrigin);\n      console.log(\"BACK HERE \", fetchedProducts);\n      res.status(200).json({\n        data: fetchedProducts\n      });\n      break;\n\n    case 'POST':\n      let postProducts = req.body.products.map(prod => {\n        delete prod.__typename;\n        delete prod.handle;\n        let images = prod.images.edges.map(img => {\n          delete img.__typename;\n          delete img.node.__typename;\n          return img;\n        });\n        prod.images = images;\n        prod.shopOrigin = shopOrigin;\n        return prod;\n      });\n      let success = await postProductstoDB(postProducts);\n      res.status(200).json({\n        success\n      });\n      break;\n\n    default:\n      res.setHeader('Allow', ['GET', 'POST']);\n      res.status(405).end(`Method ${method} Not Allowed.`);\n      break;\n  }\n});\n\nasync function fetchProductsFromDB(shopOrigin, count = 0) {\n  const params = {\n    TableName: 'Shopify_Products',\n    FilterExpression: \"shopOrigin = :shop\",\n    ExpressionAttributeValues: {\n      ':shop': \"testyiess\"\n    }\n  };\n  const awsRequest = await docClient.scan(params);\n  const result = await awsRequest.promise();\n  if (result.Items.length > 0) return result.Items;else {\n    if (count == 20) return null;\n    await fetchProductsFromDB(shopOrigin, ++count);\n  }\n}\n\nasync function postProductstoDB(products, count = 0) {\n  if (products.length == 0) return true;\n  const params = {\n    TableName: 'Shopify_Products',\n    Item: _objectSpread({}, products[products.length - 1])\n  };\n  docClient.put(params, async (err, data) => {\n    if (err) {\n      console.log(err);\n      if (count == 30) return false;\n      await postProductstoDB(products, ++count);\n    } else {\n      if (products.length > 0) {\n        products.pop();\n        await postProductstoDB(products, count);\n      }\n\n      return true;\n    }\n  });\n}","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/pages/api/products/index.js"],"names":["dotenv","require","AWS","config","update","region","credentials","accessKeyId","process","env","secretAccessKey","docClient","DynamoDB","DocumentClient","req","res","shopOrigin","cookies","setHeader","method","fetchedProducts","fetchProductsFromDB","console","log","status","json","data","postProducts","body","products","map","prod","__typename","handle","images","edges","img","node","success","postProductstoDB","end","count","params","TableName","FilterExpression","ExpressionAttributeValues","awsRequest","scan","result","promise","Items","length","Item","put","err","pop"],"mappings":"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","sourcesContent":["const dotenv = require('dotenv');\nconst AWS = require('aws-sdk');\ndotenv.config();\nAWS.config.update({\n    region: 'us-west-2', credentials: {\n        accessKeyId: process.env.accessKeyId,\n        secretAccessKey: process.env.secretAccessKey\n    }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\n\nexport default async (req, res) => {\n    const { shopOrigin } = req.cookies;\n    res.setHeader('Content-Type', 'application/json')\n\n    switch (req.method) {\n        case 'GET':\n            let fetchedProducts = await fetchProductsFromDB(shopOrigin)\n            console.log(\"BACK HERE \",fetchedProducts)\n            res.status(200).json({ data: fetchedProducts });\n            break;\n        case 'POST':\n            let postProducts = req.body.products.map(prod => {\n                delete prod.__typename;\n                delete prod.handle;\n                let images = prod.images.edges.map(img => {\n                    delete img.__typename;\n                    delete img.node.__typename;\n                    return img;\n                })\n                prod.images = images;\n                prod.shopOrigin = shopOrigin;\n                return prod\n            })\n            let success = await postProductstoDB(postProducts)\n            res.status(200).json({ success });\n            break;\n        default:\n            res.setHeader('Allow', ['GET', 'POST'])\n            res.status(405).end(`Method ${method} Not Allowed.`)\n            break;\n    }\n}\n\nasync function fetchProductsFromDB(shopOrigin, count = 0) {\n    const params = {\n        TableName: 'Shopify_Products',\n        FilterExpression: \"shopOrigin = :shop\",\n        ExpressionAttributeValues: { ':shop': \"testyiess\"}\n    }\n    const awsRequest = await docClient.scan(params);\n    const result = await awsRequest.promise();\n    if(result.Items.length > 0)\n        return result.Items;\n    else {\n        if(count == 20) return null\n        await fetchProductsFromDB(shopOrigin, ++count)\n    }\n}\n\nasync function postProductstoDB(products, count = 0) {\n    if (products.length == 0) return true;\n    const params = {\n        TableName: 'Shopify_Products',\n        Item: { ...products[products.length - 1] }\n    };\n    docClient.put(params, async (err, data) => {\n        if (err) {\n            console.log(err)\n            if (count == 30) return false;\n            await postProductstoDB(products, ++count)\n        } else {\n            if (products.length > 0) {\n                products.pop();\n                await postProductstoDB(products, count)\n            }\n            return true\n        }\n    })\n}"]},"metadata":{},"sourceType":"module"}