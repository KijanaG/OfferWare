{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\nclass EditProduct extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      discount: '',\n      price: '',\n      variantId: '',\n      showToast: false\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"itemToBeConsumed\", () => {// const item = store.get('item');\n      // const price = item.variants.edges[0].node.price;\n      // const variantId = item.variants.edges[0].node.id;\n      // const discounter = price * 0.1;\n      // this.setState({ price, variantId });\n      // return (price - discounter).toFixed(2);\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      discount: this.itemToBeConsumed()\n    });\n  }\n\n  render() {\n    const {\n      name,\n      price,\n      discount,\n      variantId\n    } = this.state;\n    return __jsx(Frame, null, __jsx(Page, null, __jsx(Layout, null, showToast, __jsx(Layout.Section, null, showError), __jsx(Layout.Section, null, __jsx(DisplayText, {\n      size: \"large\"\n    }, name), __jsx(Form, null, __jsx(Card, {\n      sectioned: true\n    }, __jsx(FormLayout, null, __jsx(TextField, {\n      prefix: \"$\",\n      value: price,\n      disabled: true,\n      label: \"Original price\",\n      type: \"price\"\n    }), __jsx(TextField, {\n      prefix: \"$\",\n      value: discount,\n      onChange: this.handleChange('discount'),\n      label: \"Discounted price\",\n      type: \"discount\"\n    }), __jsx(\"p\", null, \" This sale price will expire in two weeks \"))), __jsx(PageActions, {\n      primaryAction: [{\n        content: 'Save',\n        onAction: () => {\n          const productVariableInput = {\n            id: variantId,\n            price: discount\n          };\n          handleSubmit({\n            variables: {\n              input: productVariableInput\n            }\n          });\n        }\n      }],\n      secondaryActions: [{\n        content: 'Remove discount'\n      }]\n    }))))));\n  }\n\n}\n\nexport default EditProduct;\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/pages/edit-products.js"],"names":["Banner","Card","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","store","gql","Mutation","EditProduct","React","Component","discount","price","variantId","showToast","field","value","setState","componentDidMount","itemToBeConsumed","render","name","state","showError","handleChange","content","onAction","productVariableInput","id","handleSubmit","variables","input","UPDATE_PRICE"],"mappings":";;;;;AAAA,SACGA,MADH,EACWC,IADX,EACiBC,WADjB,EAEGC,IAFH,EAESC,UAFT,EAEqBC,KAFrB,EAE4BC,MAF5B,EAGGC,IAHH,EAGSC,WAHT,EAGsBC,SAHtB,EAGiCC,KAHjC,QAIO,kBAJP;AAKA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAEA,MAAMC,WAAN,SAA0BC,KAAK,CAACC,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCAC/B;AACLC,MAAAA,QAAQ,EAAE,EADL;AAELC,MAAAA,KAAK,EAAE,EAFF;AAGLC,MAAAA,SAAS,EAAE,EAHN;AAILC,MAAAA,SAAS,EAAE;AAJN,KAD+B;;AAAA,0CAyDvBC,KAAD,IAAW;AACvB,aAAQC,KAAD,IAAW,KAAKC,QAAL,CAAc;AAAE,SAACF,KAAD,GAASC;AAAX,OAAd,CAAlB;AACF,KA3DsC;;AAAA,8CA6DpB,MAAM,CACtB;AACA;AACA;AACA;AACA;AACA;AACF,KApEsC;AAAA;;AAQvCE,EAAAA,iBAAiB,GAAG;AACjB,SAAKD,QAAL,CAAc;AAAEN,MAAAA,QAAQ,EAAE,KAAKQ,gBAAL;AAAZ,KAAd;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACN,UAAM;AAAEC,MAAAA,IAAF;AAAQT,MAAAA,KAAR;AAAeD,MAAAA,QAAf;AAAyBE,MAAAA;AAAzB,QAAuC,KAAKS,KAAlD;AACA,WACG,MAAC,KAAD,QACG,MAAC,IAAD,QACG,MAAC,MAAD,QACIR,SADJ,EAEG,MAAC,MAAD,CAAQ,OAAR,QACIS,SADJ,CAFH,EAKG,MAAC,MAAD,CAAQ,OAAR,QACG,MAAC,WAAD;AAAa,MAAA,IAAI,EAAC;AAAlB,OAA2BF,IAA3B,CADH,EAEG,MAAC,IAAD,QACG,MAAC,IAAD;AAAM,MAAA,SAAS;AAAf,OACG,MAAC,UAAD,QAEM,MAAC,SAAD;AAAW,MAAA,MAAM,EAAC,GAAlB;AAAsB,MAAA,KAAK,EAAET,KAA7B;AAAoC,MAAA,QAAQ,EAAE,IAA9C;AACG,MAAA,KAAK,EAAC,gBADT;AAC0B,MAAA,IAAI,EAAC;AAD/B,MAFN,EAIM,MAAC,SAAD;AAAW,MAAA,MAAM,EAAC,GAAlB;AAAsB,MAAA,KAAK,EAAED,QAA7B;AAAuC,MAAA,QAAQ,EAAE,KAAKa,YAAL,CAAkB,UAAlB,CAAjD;AACG,MAAA,KAAK,EAAC,kBADT;AAC4B,MAAA,IAAI,EAAC;AADjC,MAJN,EAOG,8DAPH,CADH,CADH,EAYG,MAAC,WAAD;AACG,MAAA,aAAa,EAAE,CAAC;AACbC,QAAAA,OAAO,EAAE,MADI;AACIC,QAAAA,QAAQ,EAAE,MAAM;AAC9B,gBAAMC,oBAAoB,GAAG;AAC1BC,YAAAA,EAAE,EAAEf,SADsB;AAE1BD,YAAAA,KAAK,EAAED;AAFmB,WAA7B;AAIAkB,UAAAA,YAAY,CAAC;AACVC,YAAAA,SAAS,EAAE;AAAEC,cAAAA,KAAK,EAAEJ;AAAT;AADD,WAAD,CAAZ;AAGF;AATY,OAAD,CADlB;AAYG,MAAA,gBAAgB,EAAE,CAAC;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAD;AAZrB,MAZH,CAFH,CALH,CADH,CADH,CADH;AAyCF;;AAvDsC;;AAuE1C,eAAejB,WAAf;AAEA,MAAMwB,YAAY,GAAG1B,GAAI;;;;;;;;;;;;CAAzB","sourcesContent":["import {\n   Banner, Card, DisplayText,\n   Form, FormLayout, Frame, Layout,\n   Page, PageActions, TextField, Toast\n} from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\nclass EditProduct extends React.Component {\n   state = {\n      discount: '',\n      price: '',\n      variantId: '',\n      showToast: false,\n   };\n\n   componentDidMount() {\n      this.setState({ discount: this.itemToBeConsumed() });\n   }\n\n   render() {\n      const { name, price, discount, variantId } = this.state;\n      return (\n         <Frame>\n            <Page>\n               <Layout>\n                  {showToast}\n                  <Layout.Section>\n                     {showError}\n                  </Layout.Section>\n                  <Layout.Section>\n                     <DisplayText size=\"large\">{name}</DisplayText>\n                     <Form>\n                        <Card sectioned>\n                           <FormLayout>\n                              {/* <FormLayout.Group> */}\n                                 <TextField prefix=\"$\" value={price} disabled={true}\n                                    label=\"Original price\" type=\"price\" />\n                                 <TextField prefix=\"$\" value={discount} onChange={this.handleChange('discount')}\n                                    label=\"Discounted price\" type=\"discount\" />\n                              {/* </FormLayout.Group> */}\n                              <p> This sale price will expire in two weeks </p>\n                           </FormLayout>\n                        </Card>\n                        <PageActions\n                           primaryAction={[{\n                              content: 'Save', onAction: () => {\n                                 const productVariableInput = {\n                                    id: variantId,\n                                    price: discount,\n                                 };\n                                 handleSubmit({\n                                    variables: { input: productVariableInput }\n                                 });\n                              }\n                           }]}\n                           secondaryActions={[{ content: 'Remove discount' }]} />\n                     </Form>\n                  </Layout.Section>\n               </Layout>\n            </Page>\n         </Frame>\n      );\n   }\n\n   handleChange = (field) => {\n      return (value) => this.setState({ [field]: value });\n   }\n\n   itemToBeConsumed = () => {\n      // const item = store.get('item');\n      // const price = item.variants.edges[0].node.price;\n      // const variantId = item.variants.edges[0].node.id;\n      // const discounter = price * 0.1;\n      // this.setState({ price, variantId });\n      // return (price - discounter).toFixed(2);\n   }\n}\n\nexport default EditProduct;\n\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}