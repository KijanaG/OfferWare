{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Page, Layout, TextStyle, EmptyState, Spinner } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport axios from 'axios';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport ResourceListWithProducts from '../components/ResourceList';\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nclass Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      open: false,\n      loadingDB: true,\n      products: null,\n      productIDs: null\n    });\n\n    _defineProperty(this, \"postNewProductsToDB\", products => {\n      axios.post('/api/products', {\n        products: products.nodes\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(async res => {\n        let fetchedProducts = await this.fetchProducts();\n        console.log(fetchedProducts);\n        this.setState({\n          productIDs: null,\n          products: fetchedProducts\n        });\n      }).catch(err => {\n        alert(\"Failed To Update Database, Please Try Again.\");\n      });\n    });\n\n    _defineProperty(this, \"handleSelection\", async resources => {\n      const idsFromResources = resources.selection.map(product => product.id);\n      this.setState({\n        open: false,\n        productIDs: idsFromResources\n      });\n    });\n\n    _defineProperty(this, \"fetchProducts\", async () => {\n      return await fetch('/api/products').then(res => res.json()).then(response => {\n        this.setState({\n          products: response.data,\n          loadingDB: false\n        });\n        return true;\n      }).catch(err => {\n        alert(err);\n        return null;\n      });\n    });\n  }\n\n  async componentDidMount() {\n    this.fetchProducts();\n  }\n\n  render() {\n    const emptyState = this.state.products === null;\n    const {\n      loadingDB,\n      productIDs\n    } = this.state;\n\n    if (loadingDB) {\n      //Fetching Products from Database \n      return __jsx(Page, null, __jsx(Layout, null, __jsx(EmptyState, {\n        centeredLayout: true,\n        heading: 'Fetching Products from Database...'\n      }, __jsx(Spinner, {\n        accessibilityLabel: \"Spinner\",\n        size: \"large\",\n        color: \"inkLightest\"\n      }))));\n    }\n\n    if (productIDs) {\n      return (//If exists, user gave Voucher functionality to these products\n        __jsx(Page, null, __jsx(Layout, null, __jsx(EmptyState, {\n          centeredLayout: true,\n          heading: 'Adding Specified Products to Database...'\n        }, __jsx(Query, {\n          query: GET_PRODUCTS_BY_ID,\n          variables: {\n            ids: productIDs\n          }\n        }, ({\n          data,\n          loading,\n          error\n        }) => {\n          if (loading) return __jsx(Spinner, {\n            accessibilityLabel: \"Spinner\",\n            size: \"large\",\n            color: \"inkLightest\"\n          });\n          if (error) return __jsx(\"div\", null, error.message);else {\n            this.postNewProductsToDB(data);\n            return __jsx(Spinner, {\n              accessibilityLabel: \"Spinner\",\n              size: \"large\",\n              color: \"inkLightest\"\n            });\n          }\n        }))))\n      );\n    }\n\n    return __jsx(Page, null, __jsx(TitleBar, {\n      primaryAction: {\n        content: 'Select services',\n        onAction: () => this.setState({\n          open: true\n        })\n      }\n    }), __jsx(ResourcePicker, {\n      resourceType: \"Product\",\n      showVariants: false,\n      open: this.state.open,\n      onSelection: resources => this.handleSelection(resources),\n      onCancel: () => this.setState({\n        open: false\n      })\n    }), emptyState ? __jsx(Layout, null, __jsx(EmptyState, {\n      heading: \"Send Vouchers to your customers to be redeemed in-store.\",\n      action: {\n        content: 'Select Services',\n        onAction: () => this.setState({\n          open: true\n        })\n      },\n      image: img\n    }, __jsx(\"p\", null, \"Select products/services for which to send vouchers to customers via email.\"))) : __jsx(ResourceListWithProducts, {\n      fetchProducts: this.fetchProducts,\n      products: this.state.products\n    }));\n  }\n\n}\n\nexport default Index;\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        descriptionHtml\n        id\n        variants(first:4){\n          edges{\n            node{\n              compareAtPrice\n              price\n              title\n            }\n          }\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/pages/index.js"],"names":["Page","Layout","TextStyle","EmptyState","Spinner","ResourcePicker","TitleBar","axios","store","gql","Query","ResourceListWithProducts","img","Index","React","Component","open","loadingDB","products","productIDs","post","nodes","headers","then","res","fetchedProducts","fetchProducts","console","log","setState","catch","err","alert","resources","idsFromResources","selection","map","product","id","fetch","json","response","data","componentDidMount","render","emptyState","state","GET_PRODUCTS_BY_ID","ids","loading","error","message","postNewProductsToDB","content","onAction","handleSelection"],"mappings":"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","sourcesContent":["import { Page, Layout, TextStyle, EmptyState, Spinner } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport axios from 'axios';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport ResourceListWithProducts from '../components/ResourceList';\n\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nclass Index extends React.Component {\n    state = { open: false, loadingDB: true, products: null, productIDs: null };\n\n    async componentDidMount() {\n        this.fetchProducts();\n    }\n\n    render() {\n        const emptyState = this.state.products === null;\n        const { loadingDB, productIDs } = this.state;\n        if (loadingDB) { //Fetching Products from Database \n            return (<Page>\n                <Layout>\n                    <EmptyState centeredLayout heading={'Fetching Products from Database...'}>\n                        <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />\n                    </EmptyState>\n                </Layout>\n            </Page>\n            )\n        }\n        if (productIDs) {\n            return ( //If exists, user gave Voucher functionality to these products\n                <Page>\n                    <Layout>\n                        <EmptyState centeredLayout heading={'Adding Specified Products to Database...'}>\n                            <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: productIDs }}>\n                                {({ data, loading, error }) => {\n                                    if (loading) return <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />;\n                                    if (error) return <div>{error.message}</div>\n                                    else {\n                                        this.postNewProductsToDB(data);\n                                        return <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />;\n                                    }\n                                }}\n                            </Query>\n                        </EmptyState>\n                    </Layout>\n                </Page>\n            )\n        }\n        return (\n            <Page>\n                <TitleBar\n                    primaryAction={{\n                        content: 'Select services',\n                        onAction: () => this.setState({ open: true })\n                    }} />\n                <ResourcePicker\n                    resourceType=\"Product\"\n                    showVariants={false}\n                    open={this.state.open}\n                    onSelection={(resources) => this.handleSelection(resources)}\n                    onCancel={() => this.setState({ open: false })}\n                />\n                {emptyState ? (\n                    <Layout>\n                        <EmptyState\n                            heading=\"Send Vouchers to your customers to be redeemed in-store.\"\n                            action={{\n                                content: 'Select Services',\n                                onAction: () => this.setState({ open: true })\n                            }}\n                            image={img} >\n                            <p>Select products/services for which to send vouchers to customers via email.</p>\n                        </EmptyState>\n                    </Layout>\n                ) : (\n                        <ResourceListWithProducts fetchProducts={this.fetchProducts} products={this.state.products} />\n                    )}\n            </Page>\n        );\n    }\n\n    postNewProductsToDB = (products) => {\n        axios.post('/api/products', { products: products.nodes }, {\n            headers: { \"Content-Type\": \"application/json\" }\n        }).then(async res => {\n            let fetchedProducts = await this.fetchProducts();\n            console.log(fetchedProducts)\n            this.setState({ productIDs: null, products: fetchedProducts })\n        }).catch(err => {\n            alert(\"Failed To Update Database, Please Try Again.\")\n        })\n    }\n    handleSelection = async (resources) => {\n        const idsFromResources = resources.selection.map((product) => product.id)\n        this.setState({ open: false, productIDs: idsFromResources })\n    }\n    fetchProducts = async () => {\n        return await fetch('/api/products')\n            .then(res => res.json())\n            .then(response => {\n                this.setState({ products: response.data, loadingDB: false })\n                return true\n            })\n            .catch(err => {\n                alert(err)\n                return null\n            })\n    }\n}\n\nexport default Index;\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        descriptionHtml\n        id\n        variants(first:4){\n          edges{\n            node{\n              compareAtPrice\n              price\n              title\n            }\n          }\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}