{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getProducts($ids: [ID!]!) {\\n    nodes(ids: $ids) {\\n      ... on Product {\\n        title\\n        descriptionHtml\\n        id\\n        variants(first:4){\\n          edges{\\n            node{\\n              compareAtPrice\\n              price\\n              title\\n            }\\n          }\\n        }\\n        images(first: 10) {\\n          edges {\\n            node {\\n              originalSrc\\n              altText\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Page, Layout, TextStyle, EmptyState, Spinner } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport axios from 'axios';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport ResourceListWithProducts from '../components/ResourceList';\nvar img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nvar Index = /*#__PURE__*/function (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  var _super = _createSuper(Index);\n\n  function Index() {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      open: false,\n      loadingDB: true,\n      products: [],\n      productIDs: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"postNewProductsToDB\", function (products) {\n      axios.post('/api/products', {\n        products: products.nodes\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function _callee(res) {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(_this.fetchProducts());\n\n              case 2:\n                _this.setState({\n                  productIDs: null\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })[\"catch\"](function (err) {\n        alert(\"Failed To Update Database, Please Try Again.\");\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelection\", function _callee2(resources) {\n      var idsFromResources;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              idsFromResources = resources.selection.map(function (product) {\n                return product.id;\n              });\n\n              _this.setState({\n                open: false,\n                productIDs: idsFromResources\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchProducts\", function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(fetch('/api/products').then(function (res) {\n                return res.json();\n              }).then(function (response) {\n                _this.setState({\n                  products: response.data,\n                  loadingDB: false\n                });\n\n                return true;\n              })[\"catch\"](function (err) {\n                alert(err);\n                return null;\n              }));\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              this.fetchProducts();\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var emptyState = this.state.products.length === 0;\n      var _this$state = this.state,\n          loadingDB = _this$state.loadingDB,\n          productIDs = _this$state.productIDs;\n\n      if (loadingDB) {\n        //Fetching Products from Database \n        return __jsx(Page, null, __jsx(Layout, null, __jsx(EmptyState, {\n          centeredLayout: true,\n          heading: 'Fetching Products from Database...'\n        }, __jsx(Spinner, {\n          accessibilityLabel: \"Spinner\",\n          size: \"large\",\n          color: \"inkLightest\"\n        }))));\n      }\n\n      if (productIDs) {\n        return (//If exists, user gave Voucher functionality to these products\n          __jsx(Page, null, __jsx(Layout, null, __jsx(EmptyState, {\n            centeredLayout: true,\n            heading: 'Adding Specified Products to Database...'\n          }, __jsx(Query, {\n            query: GET_PRODUCTS_BY_ID,\n            variables: {\n              ids: productIDs\n            }\n          }, function (_ref) {\n            var data = _ref.data,\n                loading = _ref.loading,\n                error = _ref.error;\n            if (loading) return __jsx(Spinner, {\n              accessibilityLabel: \"Spinner\",\n              size: \"large\",\n              color: \"inkLightest\"\n            });\n            if (error) return __jsx(\"div\", null, error.message);else {\n              _this2.postNewProductsToDB(data);\n\n              return __jsx(Spinner, {\n                accessibilityLabel: \"Spinner\",\n                size: \"large\",\n                color: \"inkLightest\"\n              });\n            }\n          }))))\n        );\n      }\n\n      return __jsx(Page, null, __jsx(TitleBar, {\n        primaryAction: {\n          content: 'Select services',\n          onAction: function onAction() {\n            return _this2.setState({\n              open: true\n            });\n          }\n        }\n      }), __jsx(ResourcePicker, {\n        resourceType: \"Product\",\n        showVariants: false,\n        open: this.state.open,\n        onSelection: function onSelection(resources) {\n          return _this2.handleSelection(resources);\n        },\n        onCancel: function onCancel() {\n          return _this2.setState({\n            open: false\n          });\n        }\n      }), emptyState ? __jsx(Layout, null, __jsx(EmptyState, {\n        heading: \"Send Vouchers to your customers to be redeemed in-store.\",\n        action: {\n          content: 'Select Services',\n          onAction: function onAction() {\n            return _this2.setState({\n              open: true\n            });\n          }\n        },\n        image: img\n      }, __jsx(\"p\", null, \"Select products/services for which to send vouchers to customers via email.\"))) : __jsx(ResourceListWithProducts, {\n        fetchProducts: this.fetchProducts,\n        products: this.state.products\n      }));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;\nvar GET_PRODUCTS_BY_ID = gql(_templateObject());","map":null,"metadata":{},"sourceType":"module"}