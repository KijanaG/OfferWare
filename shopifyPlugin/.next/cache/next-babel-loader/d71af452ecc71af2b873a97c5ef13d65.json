{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst dotenv = require('dotenv');\n\nconst AWS = require('aws-sdk');\n\ndotenv.config();\nAWS.config.update({\n  region: 'us-west-2',\n  credentials: {\n    accessKeyId: process.env.accessKeyId,\n    secretAccessKey: process.env.secretAccessKey\n  }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\nexport default (async (req, res) => {\n  const {\n    shopOrigin\n  } = req.cookies;\n  res.setHeader('Content-Type', 'application/json');\n  let success = null;\n\n  switch (req.method) {\n    case 'GET':\n      let fetchedProducts = await fetchProductsFromDB(shopOrigin);\n      console.log(\"Fetched ITEMS\", fetchedProducts);\n      res.status(200).json({\n        data: fetchedProducts ? fetchedProducts : []\n      });\n      break;\n\n    case 'POST':\n      let postProducts = req.body.products.map(prod => {\n        delete prod.__typename;\n        let id_arr = prod.id.split('/');\n        prod.global_id = id_arr[id_arr.length - 1];\n        let images = prod.images.edges.map(img => {\n          delete img.__typename;\n          delete img.node.__typename;\n          return img.node;\n        });\n        prod.images = images;\n        let variants = prod.variants.edges.map(variant => {\n          delete variant.__typename;\n          delete variant.node.__typename;\n          return variant.node;\n        });\n        prod.variants = variants;\n        prod.shopOrigin = shopOrigin;\n        return prod;\n      });\n      success = await postProductsToDB(postProducts, 'POST');\n      res.status(200).json({\n        success\n      });\n      break;\n\n    case 'PUT':\n      success = await postProductsToDB([req.body.product], 'PUT');\n      res.status(200).json({\n        success\n      });\n      break;\n\n    case 'PATCH':\n      success = await updateProductInDB(req.body.product, shopOrigin);\n      res.status(200).json({\n        success\n      });\n      break;\n\n    default:\n      res.setHeader('Allow', ['GET', 'POST']);\n      res.status(405).end(`Method ${method} Not Allowed.`);\n      break;\n  }\n});\n\nasync function updateProductInDB(product, shop) {\n  let {\n    title,\n    descriptionHtml,\n    images,\n    variants,\n    id\n  } = product;\n  const title_params = {\n    TableName: 'Shopify_Products',\n    FilterExpression: 'shopOrigin = :shop and id = :id',\n    ExpressionAttributeValues: {\n      ':shop': shop,\n      ':id': id\n    }\n  };\n  let awsRequest = docClient.scan(title_params);\n  let result = await awsRequest.promise();\n  let updatedProduct = null;\n\n  if (result.Items.length > 0) {\n    updatedProduct = _objectSpread({}, result.Items[0], {\n      title,\n      descriptionHtml\n    });\n    await updateDB(updatedProduct, images, variants);\n    return true;\n  }\n}\n\nasync function updateDB(updatedProduct, images, variants) {\n  let newImages = [];\n\n  for (let image of images.edges) newImages.push({\n    'altText': image.node.altText,\n    'originalSrc': image.node.originalSrc\n  });\n\n  updatedProduct.images = newImages;\n  let newVariants = [];\n\n  for (let variant of variants.edges) newVariants.push({\n    'title': variant.node.title,\n    'price': variant.node.price,\n    'compareAtPrice': variant.node.compareAtPrice\n  });\n\n  updatedProduct.variants = newVariants;\n  let updated_params = {\n    TableName: 'Shopify_Products',\n    Item: updatedProduct\n  };\n  let awsReq = await docClient.put(updated_params);\n  let res = awsReq.promise();\n  return;\n}\n\nasync function fetchProductsFromDB(shopOrigin, count = 0) {\n  const params = {\n    TableName: 'Shopify_Products',\n    FilterExpression: \"shopOrigin = :shop\",\n    ExpressionAttributeValues: {\n      ':shop': shopOrigin\n    }\n  };\n  const awsRequest = await docClient.scan(params);\n  const result = await awsRequest.promise();\n  console.log(result);\n  if (result.Items.length > 0) return result.Items;else {\n    if (count == 3) return null;\n    await fetchProductsFromDB(shopOrigin, ++count);\n  }\n}\n\nasync function postProductsToDB(products, method, count = 0) {\n  if (products.length == 0) return true;\n\n  let Item = _objectSpread({}, products[products.length - 1], {\n    updatedAt: Date.now()\n  });\n\n  if (method == 'POST') {\n    Item = _objectSpread({}, Item, {\n      streetAddress: null,\n      city: null,\n      zipCode: null,\n      state: null,\n      transactionTotal: 0,\n      businessName: null,\n      merchantDescription: null,\n      email: null,\n      createdAt: Date.now(),\n      redeemedTotal: 0\n    });\n  }\n\n  const params = {\n    TableName: 'Shopify_Products',\n    Item\n  };\n  docClient.put(params, async (err, data) => {\n    if (err) {\n      if (count == 5) return false;\n      await postProductsToDB(products, method, ++count);\n    } else {\n      if (products.length > 0) {\n        products.pop();\n        await postProductsToDB(products, method, count);\n      }\n\n      return true;\n    }\n  });\n}","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/pages/api/products/index.js"],"names":["dotenv","require","AWS","config","update","region","credentials","accessKeyId","process","env","secretAccessKey","docClient","DynamoDB","DocumentClient","req","res","shopOrigin","cookies","setHeader","success","method","fetchedProducts","fetchProductsFromDB","console","log","status","json","data","postProducts","body","products","map","prod","__typename","id_arr","id","split","global_id","length","images","edges","img","node","variants","variant","postProductsToDB","product","updateProductInDB","end","shop","title","descriptionHtml","title_params","TableName","FilterExpression","ExpressionAttributeValues","awsRequest","scan","result","promise","updatedProduct","Items","updateDB","newImages","image","push","altText","originalSrc","newVariants","price","compareAtPrice","updated_params","Item","awsReq","put","count","params","updatedAt","Date","now","streetAddress","city","zipCode","state","transactionTotal","businessName","merchantDescription","email","createdAt","redeemedTotal","err","pop"],"mappings":"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","sourcesContent":["const dotenv = require('dotenv');\nconst AWS = require('aws-sdk');\ndotenv.config();\nAWS.config.update({\n    region: 'us-west-2', credentials: {\n        accessKeyId: process.env.accessKeyId,\n        secretAccessKey: process.env.secretAccessKey\n    }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\n\nexport default async (req, res) => {\n    const { shopOrigin } = req.cookies;\n    res.setHeader('Content-Type', 'application/json')\n    let success = null;\n    switch (req.method) {\n        case 'GET':\n            let fetchedProducts = await fetchProductsFromDB(shopOrigin)\n            console.log(\"Fetched ITEMS\", fetchedProducts)\n            res.status(200).json({ data: fetchedProducts ? fetchedProducts : [] });\n            break;\n        case 'POST':\n            let postProducts = req.body.products.map(prod => {\n                delete prod.__typename;\n                let id_arr = prod.id.split('/')\n                prod.global_id = id_arr[id_arr.length - 1]\n                let images = prod.images.edges.map(img => {\n                    delete img.__typename;\n                    delete img.node.__typename;\n                    return img.node;\n                })\n                prod.images = images;\n                let variants = prod.variants.edges.map(variant => {\n                    delete variant.__typename;\n                    delete variant.node.__typename;\n                    return variant.node;\n                })\n                prod.variants = variants;\n                prod.shopOrigin = shopOrigin;\n                return prod\n            })\n            success = await postProductsToDB(postProducts, 'POST')\n            res.status(200).json({ success });\n            break;\n        case 'PUT':\n            success = await postProductsToDB([req.body.product], 'PUT')\n            res.status(200).json({ success })\n            break;\n        case 'PATCH':\n            success = await updateProductInDB(req.body.product, shopOrigin)\n            res.status(200).json({ success })\n            break;\n        default:\n            res.setHeader('Allow', ['GET', 'POST'])\n            res.status(405).end(`Method ${method} Not Allowed.`)\n            break;\n    }\n}\n\nasync function updateProductInDB(product, shop) {\n    let { title, descriptionHtml, images, variants, id } = product;\n    const title_params = {\n        TableName: 'Shopify_Products',\n        FilterExpression: 'shopOrigin = :shop and id = :id',\n        ExpressionAttributeValues: { ':shop': shop, ':id': id }\n    }\n    let awsRequest = docClient.scan(title_params);\n    let result = await awsRequest.promise();\n    let updatedProduct = null;\n    if (result.Items.length > 0) {\n        updatedProduct = { ...result.Items[0], title, descriptionHtml }\n        await updateDB(updatedProduct, images, variants)\n        return true\n    }\n}\n\nasync function updateDB(updatedProduct, images, variants) {\n    let newImages = [];\n    for (let image of images.edges)\n        newImages.push({ 'altText': image.node.altText, 'originalSrc': image.node.originalSrc })\n    updatedProduct.images = newImages;\n    let newVariants = [];\n    for (let variant of variants.edges)\n        newVariants.push({ 'title': variant.node.title, 'price': variant.node.price, 'compareAtPrice': variant.node.compareAtPrice })\n    updatedProduct.variants = newVariants\n    let updated_params = {\n        TableName: 'Shopify_Products',\n        Item: updatedProduct\n    }\n    let awsReq = await docClient.put(updated_params);\n    let res = awsReq.promise();\n    return;\n}\n\nasync function fetchProductsFromDB(shopOrigin, count = 0) {\n    const params = {\n        TableName: 'Shopify_Products',\n        FilterExpression: \"shopOrigin = :shop\",\n        ExpressionAttributeValues: { ':shop': shopOrigin }\n    }\n    const awsRequest = await docClient.scan(params);\n    const result = await awsRequest.promise();\n    console.log(result)\n    if (result.Items.length > 0)\n        return result.Items;\n    else {\n        if (count == 3) return null\n        await fetchProductsFromDB(shopOrigin, ++count)\n    }\n}\n\nasync function postProductsToDB(products, method, count = 0) {\n    if (products.length == 0) return true;\n    let Item = { ...products[products.length - 1], updatedAt: Date.now() }\n    if (method == 'POST') {\n        Item = {\n            ...Item, streetAddress: null, city: null, zipCode: null, state: null, \n            transactionTotal: 0, businessName: null, merchantDescription: null, \n            email: null, createdAt: Date.now(), redeemedTotal: 0\n        }\n    }\n    const params = { TableName: 'Shopify_Products', Item }\n    docClient.put(params, async (err, data) => {\n        if (err) {\n            if (count == 5) return false;\n            await postProductsToDB(products, method, ++count)\n        } else {\n            if (products.length > 0) {\n                products.pop();\n                await postProductsToDB(products, method, count)\n            }\n            return true\n        }\n    })\n}"]},"metadata":{},"sourceType":"module"}