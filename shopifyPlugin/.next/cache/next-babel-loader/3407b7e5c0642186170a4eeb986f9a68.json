{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getProducts($id: [ID!]!) {\\n    nodes(ids: $id) {\\n      ... on Product {\\n        title\\n        descriptionHtml\\n        id\\n        variants(first:4){\\n          edges{\\n            node{\\n              compareAtPrice\\n              price\\n              title\\n            }\\n          }\\n        }\\n        images(first: 10) {\\n          edges {\\n            node {\\n              originalSrc\\n              altText\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail, Button, Form } from '@shopify/polaris';\nimport store from 'store-js';\nimport axios from 'axios';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nvar ResourceListWithProducts = /*#__PURE__*/function (_React$Component) {\n  _inherits(ResourceListWithProducts, _React$Component);\n\n  var _super = _createSuper(ResourceListWithProducts);\n\n  function ResourceListWithProducts() {\n    var _this;\n\n    _classCallCheck(this, ResourceListWithProducts);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      updating: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleUpload\", function (id, index) {\n      var updating = _this.state.updating;\n      updating[id] = true;\n\n      _this.setState({\n        updating: updating\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"postProductToDB\", function (product) {\n      axios.patch('/api/products', {\n        product: product\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function _callee(res) {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.setState({\n                  updating: {}\n                });\n\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(_this.props.fetchProducts());\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })[\"catch\"](function (err) {\n        alert(\"Something went wrong, plase refresh page.\");\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ResourceListWithProducts, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var app = this.context;\n\n      var redirectToProduct = function redirectToProduct() {\n        var redirect = Redirect.create(app);\n        redirect.dispatch(Redirect.Action.APP, '/edit-products');\n      };\n\n      return __jsx(Card, null, __jsx(ResourceList, {\n        showHeader: true,\n        resourceName: {\n          singular: 'Product',\n          plural: 'Products'\n        },\n        items: this.props.products,\n        renderItem: function renderItem(item, _, indx) {\n          var complete = false;\n\n          if (item.streetAddress && item.city && item.email && item.zipCode && item.state && item.businessName && item.merchantDescription) {\n            complete = true;\n          }\n\n          var media = __jsx(Thumbnail, {\n            source: item.images[0] ? item.images[0].originalSrc : '',\n            alt: item.images[0] ? item.images[0].altText : ''\n          });\n\n          return __jsx(ResourceList.Item, {\n            id: item.id,\n            media: media,\n            accessibilityLabel: \"View details for \".concat(item.title),\n            onClick: function onClick() {}\n          }, __jsx(Stack, null, __jsx(Stack.Item, {\n            fill: true\n          }, __jsx(\"h3\", null, \" \", __jsx(TextStyle, {\n            variation: \"strong\"\n          }, \" \", item.title, \" \"), \" \")), __jsx(Stack.Item, null, _this2.state.updating[item.id] ? __jsx(Query, {\n            query: GET_PRODUCT_BY_ID,\n            variables: {\n              id: [item.id]\n            }\n          }, function (_ref) {\n            var data = _ref.data,\n                loading = _ref.loading,\n                error = _ref.error;\n            if (error) return __jsx(TextStyle, null, error.message);\n            if (data) _this2.postProductToDB(data.nodes[0]);\n            return __jsx(Button, {\n              loading: _this2.state.updating[item.id],\n              primary: true\n            }, \"Update Item\");\n          }) : __jsx(Form, {\n            onSubmit: function onSubmit() {\n              return _this2.handleUpload(item.id, indx);\n            },\n            preventDefault: true\n          }, __jsx(Button, {\n            loading: false,\n            submit: true,\n            primary: true\n          }, \"Update Item\"))), __jsx(Stack.Item, null, \"\\xA0 \", item.redeemedTotal, \"/\", item.transactionTotal, \" \\xA0\"), __jsx(Stack.Item, null, __jsx(\"div\", {\n            style: {\n              color: complete ? \"green\" : \"red\"\n            }\n          }, __jsx(Button, {\n            monochrome: true,\n            outline: true,\n            onClick: function onClick() {\n              store.set('product', item);\n              redirectToProduct();\n            }\n          }, complete ? \" Complete \" : \"Incomplete\", \" \")))));\n        }\n      }));\n    }\n  }]);\n\n  return ResourceListWithProducts;\n}(React.Component);\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;\nvar GET_PRODUCT_BY_ID = gql(_templateObject());","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/components/ResourceList.js"],"names":["Card","ResourceList","Stack","TextStyle","Thumbnail","Button","Form","store","axios","Redirect","Context","gql","Query","ResourceListWithProducts","updating","id","index","state","setState","product","patch","headers","then","res","props","fetchProducts","err","alert","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","singular","plural","products","item","_","indx","complete","streetAddress","city","email","zipCode","businessName","merchantDescription","media","images","originalSrc","altText","title","GET_PRODUCT_BY_ID","data","loading","error","message","postProductToDB","nodes","handleUpload","redeemedTotal","transactionTotal","color","set","React","Component"],"mappings":"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","sourcesContent":["import { Card, ResourceList, Stack, TextStyle, Thumbnail, Button, Form } from '@shopify/polaris';\nimport store from 'store-js';\nimport axios from 'axios';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nclass ResourceListWithProducts extends React.Component {\n    state = {\n        updating: {},\n    }\n    static contextType = Context;\n    handleUpload = (id, index) => {\n        let updating = this.state.updating;\n        updating[id] = true\n        this.setState({ updating: updating })\n    }\n    render() {\n        const app = this.context;\n        const redirectToProduct = () => {\n            const redirect = Redirect.create(app);\n            redirect.dispatch(\n                Redirect.Action.APP,\n                '/edit-products',\n            )\n        }\n        return (\n            <Card>\n                <ResourceList showHeader resourceName={{ singular: 'Product', plural: 'Products' }}\n                    items={this.props.products}\n                    renderItem={(item, _, indx) => {\n                        let complete = false;\n                        if (item.streetAddress && item.city && item.email && item.zipCode\n                            && item.state && item.businessName && item.merchantDescription) {\n                            complete = true\n                        }\n                        const media = (\n                            <Thumbnail\n                                source={item.images[0] ? item.images[0].originalSrc : ''}\n                                alt={item.images[0] ? item.images[0].altText : ''} />\n                        );\n                        return (\n                            <ResourceList.Item id={item.id} media={media}\n                                accessibilityLabel={`View details for ${item.title}`}\n                                onClick={() => { }}>\n                                <Stack>\n                                    <Stack.Item fill>\n                                        <h3> <TextStyle variation=\"strong\"> {item.title} </TextStyle> </h3>\n                                    </Stack.Item>\n                                    <Stack.Item>\n                                        {this.state.updating[item.id] ?\n                                            <Query query={GET_PRODUCT_BY_ID} variables={{ id: [item.id] }}>\n                                                {({ data, loading, error }) => {\n                                                    if (error) return <TextStyle>{error.message}</TextStyle>\n                                                    if (data) this.postProductToDB(data.nodes[0])\n                                                    return <Button loading={this.state.updating[item.id]} primary>Update Item</Button>\n                                                }}\n                                            </Query>\n                                            :\n                                            <Form onSubmit={() => this.handleUpload(item.id, indx)} preventDefault={true}>\n                                                <Button loading={false} submit primary>Update Item</Button>\n                                            </Form>\n                                        }\n                                    </Stack.Item>\n                                    <Stack.Item>\n                                        &nbsp; {item.redeemedTotal}/{item.transactionTotal} &nbsp;\n                                    </Stack.Item>\n                                    <Stack.Item>\n                                        <div style={{ color: complete ? \"green\" : \"red\" }}>\n                                            <Button monochrome outline onClick={() => {\n                                                store.set('product', item); redirectToProduct();\n                                            }}>{complete ? \" Complete \" : \"Incomplete\"} </Button>\n                                        </div>\n                                    </Stack.Item>\n                                </Stack>\n                            </ResourceList.Item>\n                        );\n                    }}\n                />\n            </Card>\n        );\n    }\n    postProductToDB = (product) => {\n        axios.patch('/api/products', { product }, {\n            headers: { \"Content-Type\": \"application/json\" }\n        }).then(async res => {\n            this.setState({ updating: {} })\n            await this.props.fetchProducts()\n        }).catch(err => {\n            alert(\"Something went wrong, plase refresh page.\")\n        })\n    }\n}\n\nexport default ResourceListWithProducts;\n\nconst GET_PRODUCT_BY_ID = gql`\n  query getProducts($id: [ID!]!) {\n    nodes(ids: $id) {\n      ... on Product {\n        title\n        descriptionHtml\n        id\n        variants(first:4){\n          edges{\n            node{\n              compareAtPrice\n              price\n              title\n            }\n          }\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n`;"]},"metadata":{},"sourceType":"module"}