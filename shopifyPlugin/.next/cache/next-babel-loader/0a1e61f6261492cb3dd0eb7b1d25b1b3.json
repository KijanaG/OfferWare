{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\nclass EditProduct extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      discount: '',\n      price: '',\n      variantId: '',\n      showToast: false\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"itemToBeConsumed\", () => {// const item = store.get('item');\n      // const price = item.variants.edges[0].node.price;\n      // const variantId = item.variants.edges[0].node.id;\n      // const discounter = price * 0.1;\n      // this.setState({ price, variantId });\n      // return (price - discounter).toFixed(2);\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      discount: this.itemToBeConsumed()\n    });\n  }\n\n  render() {\n    const {\n      name,\n      price,\n      discount,\n      variantId\n    } = this.state;\n    return __jsx(Mutation, {\n      mutation: UPDATE_PRICE\n    }, (handleSubmit, {\n      error,\n      data\n    }) => {\n      const showError = error && __jsx(Banner, {\n        status: \"critical\"\n      }, error.message);\n\n      const showToast = data && data.productVariantUpdate && __jsx(Toast, {\n        content: \"Successfully updated\",\n        onDismiss: () => this.setState({\n          showToast: false\n        })\n      });\n\n      return __jsx(Frame, null, __jsx(Page, null, __jsx(Layout, null, showToast, __jsx(Layout.Section, null, showError), __jsx(Layout.Section, null, __jsx(DisplayText, {\n        size: \"large\"\n      }, name), __jsx(Form, null, __jsx(Card, {\n        sectioned: true\n      }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        prefix: \"$\",\n        value: price,\n        disabled: true,\n        label: \"Original price\",\n        type: \"price\"\n      }), __jsx(TextField, {\n        prefix: \"$\",\n        value: discount,\n        onChange: this.handleChange('discount'),\n        label: \"Discounted price\",\n        type: \"discount\"\n      })), __jsx(\"p\", null, \" This sale price will expire in two weeks \"))), __jsx(PageActions, {\n        primaryAction: [{\n          content: 'Save',\n          onAction: () => {\n            const productVariableInput = {\n              id: variantId,\n              price: discount\n            };\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            });\n          }\n        }],\n        secondaryActions: [{\n          content: 'Remove discount'\n        }]\n      }))))));\n    });\n  }\n\n}\n\nexport default EditProduct;\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/pages/edit-products.js"],"names":["Banner","Card","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","store","gql","Mutation","EditProduct","React","Component","discount","price","variantId","showToast","field","value","setState","componentDidMount","itemToBeConsumed","render","name","state","UPDATE_PRICE","handleSubmit","error","data","showError","message","productVariantUpdate","handleChange","content","onAction","productVariableInput","id","variables","input"],"mappings":";;;;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,WAAvB,EAAoCC,IAApC,EAA0CC,UAA1C,EAAsDC,KAAtD,EAA6DC,MAA7D,EAAqEC,IAArE,EAA2EC,WAA3E,EAAwFC,SAAxF,EAAmGC,KAAnG,QAAgH,kBAAhH;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAEA,MAAMC,WAAN,SAA0BC,KAAK,CAACC,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCAC/B;AACLC,MAAAA,QAAQ,EAAE,EADL;AAELC,MAAAA,KAAK,EAAE,EAFF;AAGLC,MAAAA,SAAS,EAAE,EAHN;AAILC,MAAAA,SAAS,EAAE;AAJN,KAD+B;;AAAA,0CAsEvBC,KAAD,IAAW;AACvB,aAAQC,KAAD,IAAW,KAAKC,QAAL,CAAc;AAAE,SAACF,KAAD,GAASC;AAAX,OAAd,CAAlB;AACF,KAxEsC;;AAAA,8CA0EpB,MAAM,CACtB;AACA;AACA;AACA;AACA;AACA;AACF,KAjFsC;AAAA;;AAQvCE,EAAAA,iBAAiB,GAAG;AACjB,SAAKD,QAAL,CAAc;AAAEN,MAAAA,QAAQ,EAAE,KAAKQ,gBAAL;AAAZ,KAAd;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACN,UAAM;AAAEC,MAAAA,IAAF;AAAQT,MAAAA,KAAR;AAAeD,MAAAA,QAAf;AAAyBE,MAAAA;AAAzB,QAAuC,KAAKS,KAAlD;AACA,WACG,MAAC,QAAD;AACG,MAAA,QAAQ,EAAEC;AADb,OAEI,CAACC,YAAD,EAAe;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf,KAAmC;AACjC,YAAMC,SAAS,GAAGF,KAAK,IACpB,MAAC,MAAD;AAAQ,QAAA,MAAM,EAAC;AAAf,SAA2BA,KAAK,CAACG,OAAjC,CADH;;AAGA,YAAMd,SAAS,GAAGY,IAAI,IAAIA,IAAI,CAACG,oBAAb,IACf,MAAC,KAAD;AAAO,QAAA,OAAO,EAAC,sBAAf;AAAsC,QAAA,SAAS,EAAE,MAAM,KAAKZ,QAAL,CAAc;AAAEH,UAAAA,SAAS,EAAE;AAAb,SAAd;AAAvD,QADH;;AAGA,aACG,MAAC,KAAD,QACG,MAAC,IAAD,QACG,MAAC,MAAD,QACIA,SADJ,EAEG,MAAC,MAAD,CAAQ,OAAR,QACIa,SADJ,CAFH,EAKG,MAAC,MAAD,CAAQ,OAAR,QACG,MAAC,WAAD;AAAa,QAAA,IAAI,EAAC;AAAlB,SAA2BN,IAA3B,CADH,EAEG,MAAC,IAAD,QACG,MAAC,IAAD;AAAM,QAAA,SAAS;AAAf,SACG,MAAC,UAAD,QACG,MAAC,UAAD,CAAY,KAAZ,QACG,MAAC,SAAD;AAAW,QAAA,MAAM,EAAC,GAAlB;AAAsB,QAAA,KAAK,EAAET,KAA7B;AAAoC,QAAA,QAAQ,EAAE,IAA9C;AACG,QAAA,KAAK,EAAC,gBADT;AAC0B,QAAA,IAAI,EAAC;AAD/B,QADH,EAGG,MAAC,SAAD;AAAW,QAAA,MAAM,EAAC,GAAlB;AAAsB,QAAA,KAAK,EAAED,QAA7B;AAAuC,QAAA,QAAQ,EAAE,KAAKmB,YAAL,CAAkB,UAAlB,CAAjD;AACG,QAAA,KAAK,EAAC,kBADT;AAC4B,QAAA,IAAI,EAAC;AADjC,QAHH,CADH,EAOG,8DAPH,CADH,CADH,EAYG,MAAC,WAAD;AACG,QAAA,aAAa,EAAE,CAAC;AACbC,UAAAA,OAAO,EAAE,MADI;AACIC,UAAAA,QAAQ,EAAE,MAAM;AAC9B,kBAAMC,oBAAoB,GAAG;AAC1BC,cAAAA,EAAE,EAAErB,SADsB;AAE1BD,cAAAA,KAAK,EAAED;AAFmB,aAA7B;AAIAa,YAAAA,YAAY,CAAC;AACVW,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,KAAK,EAAEH;AAAT;AADD,aAAD,CAAZ;AAGF;AATY,SAAD,CADlB;AAYG,QAAA,gBAAgB,EAAE,CAAC;AAAEF,UAAAA,OAAO,EAAE;AAAX,SAAD;AAZrB,QAZH,CAFH,CALH,CADH,CADH,CADH;AAyCF,KAlDJ,CADH;AAsDF;;AApEsC;;AAoF1C,eAAevB,WAAf;AAEA,MAAMe,YAAY,GAAGjB,GAAI;;;;;;;;;;;;CAAzB","sourcesContent":["import { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\nclass EditProduct extends React.Component {\n   state = {\n      discount: '',\n      price: '',\n      variantId: '',\n      showToast: false,\n   };\n\n   componentDidMount() {\n      this.setState({ discount: this.itemToBeConsumed() });\n   }\n\n   render() {\n      const { name, price, discount, variantId } = this.state;\n      return (\n         <Mutation\n            mutation={UPDATE_PRICE} >\n            {(handleSubmit, { error, data }) => {\n               const showError = error && (\n                  <Banner status=\"critical\">{error.message}</Banner>\n               );\n               const showToast = data && data.productVariantUpdate && (\n                  <Toast content=\"Successfully updated\" onDismiss={() => this.setState({ showToast: false })} />\n               );\n               return (\n                  <Frame>\n                     <Page>\n                        <Layout>\n                           {showToast}\n                           <Layout.Section>\n                              {showError}\n                           </Layout.Section>\n                           <Layout.Section>\n                              <DisplayText size=\"large\">{name}</DisplayText>\n                              <Form>\n                                 <Card sectioned>\n                                    <FormLayout>\n                                       <FormLayout.Group>\n                                          <TextField prefix=\"$\" value={price} disabled={true}\n                                             label=\"Original price\" type=\"price\" />\n                                          <TextField prefix=\"$\" value={discount} onChange={this.handleChange('discount')}\n                                             label=\"Discounted price\" type=\"discount\" />\n                                       </FormLayout.Group>\n                                       <p> This sale price will expire in two weeks </p>\n                                    </FormLayout>\n                                 </Card>\n                                 <PageActions\n                                    primaryAction={[{\n                                       content: 'Save', onAction: () => {\n                                          const productVariableInput = {\n                                             id: variantId,\n                                             price: discount,\n                                          };\n                                          handleSubmit({\n                                             variables: { input: productVariableInput }\n                                          });\n                                       }\n                                    }]}\n                                    secondaryActions={[{ content: 'Remove discount' }]} />\n                              </Form>\n                           </Layout.Section>\n                        </Layout>\n                     </Page>\n                  </Frame>\n               );\n            }}\n         </Mutation>\n      );\n   }\n\n   handleChange = (field) => {\n      return (value) => this.setState({ [field]: value });\n   }\n\n   itemToBeConsumed = () => {\n      // const item = store.get('item');\n      // const price = item.variants.edges[0].node.price;\n      // const variantId = item.variants.edges[0].node.id;\n      // const discounter = price * 0.1;\n      // this.setState({ price, variantId });\n      // return (price - discounter).toFixed(2);\n   }\n}\n\nexport default EditProduct;\n\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}