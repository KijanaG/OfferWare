{"ast":null,"code":"var _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar dotenv = require('dotenv');\n\nvar AWS = require('aws-sdk');\n\nvar sgMail = require('@sendgrid/mail');\n\nvar _short = require('short-uuid');\n\nvar NodeGeocoder = require('node-geocoder');\n\nvar geocoder = NodeGeocoder({\n  apiKey: 'AIzaSyAfTmvVvLL6-SdQy6O5GcgiG3vxoDDEhic',\n  formatter: null\n});\ndotenv.config();\nsgMail.setApiKey(process.env.sendGridKey);\nAWS.config.update({\n  region: 'us-west-2',\n  credentials: {\n    accessKeyId: process.env.accessKeyId,\n    secretAccessKey: process.env.secretAccessKey\n  }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\nmodule.exports = {\n  getCoords: function getCoords(street, city, zipCode, state) {\n    var res;\n    return _regeneratorRuntime.async(function getCoords$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(geocoder.geocode(\"\".concat(street, \" \").concat(city, \", \").concat(state, \" \").concat(zipCode)));\n\n          case 2:\n            res = _context.sent;\n            console.log(res);\n            return _context.abrupt(\"return\", \"HELLLO\");\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  sendVoucherLink: function sendVoucherLink(shop, email, title, variant_title, id) {\n    var p_params, awsRequest, result, transaction_id, v_code, variantPurchased, _iterator, _step, variant, check_params, awsTReq, tResult, t_params, res, link, sendEmail, msg, resMail;\n\n    return _regeneratorRuntime.async(function sendVoucherLink$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            p_params = {\n              TableName: 'Shopify_Products',\n              FilterExpression: 'shopOrigin = :shop and title = :t',\n              ExpressionAttributeValues: {\n                ':shop': shop,\n                ':t': title\n              }\n            };\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(docClient.scan(p_params));\n\n          case 3:\n            awsRequest = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(awsRequest.promise());\n\n          case 6:\n            result = _context2.sent;\n\n            if (!(result.Items.length > 0)) {\n              _context2.next = 41;\n              break;\n            }\n\n            console.log(\"Received Item\");\n            transaction_id = _short.generate();\n            v_code = Date.now().toString();\n            variantPurchased = null;\n            _iterator = _createForOfIteratorHelper(result.Items[0].variants);\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                variant = _step.value;\n\n                if (variant.title == variant_title) {\n                  variantPurchased = variant;\n                  variantPurchased.variant_title = variant_title;\n                  variantPurchased.title = title;\n                }\n              } //Check if transaction has already been made due to faulty webhook\n\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            check_params = {\n              TableName: 'Deal_Transactions',\n              FilterExpression: 'order_id = :id and variant_title =:v',\n              ExpressionAttributeValues: {\n                ':id': id,\n                ':v': variant_title.length > 0 ? variant_title : null\n              }\n            };\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap(docClient.scan(check_params));\n\n          case 17:\n            awsTReq = _context2.sent;\n            _context2.next = 20;\n            return _regeneratorRuntime.awrap(awsTReq.promise());\n\n          case 20:\n            tResult = _context2.sent;\n\n            if (!(tResult.Items.length > 0)) {\n              _context2.next = 23;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 23:\n            //Get variant from variant array & add to transaction\n            t_params = {\n              TableName: 'Deal_Transactions',\n              Item: _objectSpread({\n                transaction_id: transaction_id,\n                order_id: id,\n                email: email,\n                shopOrigin: shop\n              }, variantPurchased, {\n                time_purchased: Date.now(),\n                v_code: v_code.substring(v_code.length - 5),\n                time_redeemed: null,\n                rating: null,\n                review: null,\n                status: 'PURCHASED',\n                vendor: result.Items[0].id\n              })\n            };\n            _context2.next = 26;\n            return _regeneratorRuntime.awrap(docClient.put(t_params));\n\n          case 26:\n            awsRequest = _context2.sent;\n            _context2.next = 29;\n            return _regeneratorRuntime.awrap(awsRequest.promise());\n\n          case 29:\n            res = _context2.sent;\n\n            if (!(Object.keys(res).length > 0)) {\n              _context2.next = 32;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 32:\n            console.log(\"Created Transaction\");\n            link = \"https://scottsdeal.offerware.co/\".concat(transaction_id, \"/redeem/\").concat(result.Items[0].id, \"?shop=\").concat(shop); // Eventually replace variant in email for more targerted content\n            // if (!result.Items[0].email) return //Temporary while developing\n\n            sendEmail = result.Items[0].email.replace('{{Auto-Generated Link}}', link);\n            console.log(sendEmail);\n            msg = {\n              to: email,\n              from: 'scottsdeal@offerware.co',\n              subject: \"Your Voucher Link for: \".concat(variant_title, \".\"),\n              text: sendEmail\n            };\n            _context2.next = 39;\n            return _regeneratorRuntime.awrap(sgMail.send(msg));\n\n          case 39:\n            resMail = _context2.sent;\n            return _context2.abrupt(\"return\", true);\n\n          case 41:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  updateProductInDB: function updateProductInDB(title, handle, shop, descriptionHtml, images, variants) {\n    var title_params, awsRequest, result, updatedProduct, handle_params;\n    return _regeneratorRuntime.async(function updateProductInDB$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(\"UPDATING\");\n            title_params = {\n              TableName: 'Shopify_Products',\n              FilterExpression: 'shopOrigin = :shop and title = :t',\n              ExpressionAttributeValues: {\n                ':shop': shop,\n                ':t': title\n              }\n            };\n            awsRequest = docClient.scan(title_params);\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(awsRequest.promise());\n\n          case 5:\n            result = _context3.sent;\n            updatedProduct = null; // First check If title did not change & update db if found\n\n            if (!(result.Items.length > 0)) {\n              _context3.next = 14;\n              break;\n            }\n\n            updatedProduct = _objectSpread({}, result.Items[0], {\n              title: title,\n              handle: handle,\n              descriptionHtml: descriptionHtml\n            });\n            _context3.next = 11;\n            return _regeneratorRuntime.awrap(updateDB(updatedProduct, images, variants));\n\n          case 11:\n            return _context3.abrupt(\"return\");\n\n          case 14:\n            // Check if handle did not change & update db if found\n            handle_params = {\n              TableName: 'Shopify_Products',\n              FilterExpression: 'shopOrigin = :shop and handle = :h',\n              ExpressionAttributeValues: {\n                ':shop': shop,\n                ':h': handle\n              }\n            };\n            awsRequest = docClient.scan(handle_params);\n            _context3.next = 18;\n            return _regeneratorRuntime.awrap(awsRequest.promise());\n\n          case 18:\n            result = _context3.sent;\n            if (result.Items.length > 0) updatedProduct = _objectSpread({}, result.Items[0], {\n              title: title,\n              handle: handle,\n              descriptionHtml: descriptionHtml\n            });\n            _context3.next = 22;\n            return _regeneratorRuntime.awrap(updateDB(updatedProduct, images, variants));\n\n          case 22:\n            return _context3.abrupt(\"return\");\n\n          case 23:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\n\nfunction updateDB(updatedProduct, images, variants) {\n  var newImages, _iterator2, _step2, image, newVariants, _iterator3, _step3, variant, updated_params, awsReq, res;\n\n  return _regeneratorRuntime.async(function updateDB$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          newImages = [];\n          _iterator2 = _createForOfIteratorHelper(images);\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              image = _step2.value;\n              newImages.push({\n                'altText': image.alt,\n                'originalSrc': image.src\n              });\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          updatedProduct.images = newImages;\n          newVariants = [];\n          _iterator3 = _createForOfIteratorHelper(variants);\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              variant = _step3.value;\n              newVariants.push({\n                'title': variant.title,\n                'price': variant.price,\n                'compareAtPrice': variant.compare_at_price\n              });\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          updatedProduct.variants = newVariants;\n          updated_params = {\n            TableName: 'Shopify_Products',\n            Item: updatedProduct\n          };\n          _context4.next = 11;\n          return _regeneratorRuntime.awrap(docClient.put(updated_params));\n\n        case 11:\n          awsReq = _context4.sent;\n          res = awsReq.promise();\n          return _context4.abrupt(\"return\");\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/api.js"],"names":["dotenv","require","AWS","sgMail","short","NodeGeocoder","geocoder","apiKey","formatter","config","setApiKey","process","env","sendGridKey","update","region","credentials","accessKeyId","secretAccessKey","docClient","DynamoDB","DocumentClient","module","exports","getCoords","street","city","zipCode","state","geocode","res","console","log","sendVoucherLink","shop","email","title","variant_title","id","p_params","TableName","FilterExpression","ExpressionAttributeValues","scan","awsRequest","promise","result","Items","length","transaction_id","generate","v_code","Date","now","toString","variantPurchased","variants","variant","check_params","awsTReq","tResult","t_params","Item","order_id","shopOrigin","time_purchased","substring","time_redeemed","rating","review","status","vendor","put","Object","keys","link","sendEmail","replace","msg","to","from","subject","text","send","resMail","updateProductInDB","handle","descriptionHtml","images","title_params","updatedProduct","updateDB","handle_params","newImages","image","push","alt","src","newVariants","price","compare_at_price","updated_params","awsReq"],"mappings":"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","sourcesContent":["const dotenv = require('dotenv');\nconst AWS = require('aws-sdk');\nconst sgMail = require('@sendgrid/mail');\nconst short = require('short-uuid');\nconst NodeGeocoder = require('node-geocoder');\nconst geocoder = NodeGeocoder({\n    apiKey: 'AIzaSyAfTmvVvLL6-SdQy6O5GcgiG3vxoDDEhic',\n    formatter: null\n})\ndotenv.config();\nsgMail.setApiKey(process.env.sendGridKey);\nAWS.config.update({\n    region: 'us-west-2', credentials: {\n        accessKeyId: process.env.accessKeyId,\n        secretAccessKey: process.env.secretAccessKey\n    }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\n\n\nmodule.exports = {\n    getCoords: async (street, city, zipCode, state) => {\n        let res =  await geocoder.geocode(`${street} ${city}, ${state} ${zipCode}`)\n        console.log(res)\n        return \"HELLLO\"\n    },\n    sendVoucherLink: async (shop, email, title, variant_title, id) => {\n        const p_params = {\n            TableName: 'Shopify_Products',\n            FilterExpression: 'shopOrigin = :shop and title = :t',\n            ExpressionAttributeValues: { ':shop': shop, ':t': title }\n        }\n        let awsRequest = await docClient.scan(p_params);\n        let result = await awsRequest.promise();\n        if (result.Items.length > 0) {\n            console.log(\"Received Item\")\n            const transaction_id = short.generate();\n            const v_code = Date.now().toString();\n            let variantPurchased = null;\n            for (let variant of result.Items[0].variants) {\n                if (variant.title == variant_title) {\n                    variantPurchased = variant\n                    variantPurchased.variant_title = variant_title;\n                    variantPurchased.title = title\n                }\n            }\n            //Check if transaction has already been made due to faulty webhook\n            const check_params = {\n                TableName: 'Deal_Transactions',\n                FilterExpression: 'order_id = :id and variant_title =:v',\n                ExpressionAttributeValues: { ':id': id, ':v': variant_title.length > 0 ? variant_title : null }\n            }\n            let awsTReq = await docClient.scan(check_params)\n            let tResult = await awsTReq.promise()\n            if (tResult.Items.length > 0) return\n            //Get variant from variant array & add to transaction\n            const t_params = {\n                TableName: 'Deal_Transactions',\n                Item: {\n                    transaction_id, order_id: id, email, shopOrigin: shop,\n                    ...variantPurchased, time_purchased: Date.now(),\n                    v_code: v_code.substring(v_code.length - 5),\n                    time_redeemed: null, rating: null, review: null,\n                    status: 'PURCHASED', vendor: result.Items[0].id\n                }\n            }\n            awsRequest = await docClient.put(t_params);\n            let res = await awsRequest.promise();\n            if (Object.keys(res).length > 0) return false\n            console.log(\"Created Transaction\")\n            let link = `https://scottsdeal.offerware.co/${transaction_id}/redeem/${result.Items[0].id}?shop=${shop}`\n            // Eventually replace variant in email for more targerted content\n            // if (!result.Items[0].email) return //Temporary while developing\n            let sendEmail = result.Items[0].email.replace('{{Auto-Generated Link}}', link)\n            console.log(sendEmail)\n            const msg = {\n                to: email, from: 'scottsdeal@offerware.co',\n                subject: `Your Voucher Link for: ${variant_title}.`,\n                text: sendEmail,\n            }\n            let resMail = await sgMail.send(msg)\n            return true\n        }\n    },\n    updateProductInDB: async (title, handle, shop, descriptionHtml, images, variants) => {\n        console.log(\"UPDATING\")\n        const title_params = {\n            TableName: 'Shopify_Products',\n            FilterExpression: 'shopOrigin = :shop and title = :t',\n            ExpressionAttributeValues: { ':shop': shop, ':t': title }\n        }\n        let awsRequest = docClient.scan(title_params);\n        let result = await awsRequest.promise();\n        let updatedProduct = null;\n        // First check If title did not change & update db if found\n        if (result.Items.length > 0) {\n            updatedProduct = { ...result.Items[0], title, handle, descriptionHtml }\n            await updateDB(updatedProduct, images, variants)\n            return\n        } else { // Check if handle did not change & update db if found\n            const handle_params = {\n                TableName: 'Shopify_Products',\n                FilterExpression: 'shopOrigin = :shop and handle = :h',\n                ExpressionAttributeValues: { ':shop': shop, ':h': handle }\n            }\n            awsRequest = docClient.scan(handle_params);\n            result = await awsRequest.promise();\n            if (result.Items.length > 0)\n                updatedProduct = { ...result.Items[0], title, handle, descriptionHtml }\n            await updateDB(updatedProduct, images, variants)\n            // else do nothing because Shopify Admin did not subscribe\n            // to Voucher capabilities with this products\n            return\n        }\n    },\n}\n\nasync function updateDB(updatedProduct, images, variants) {\n    let newImages = [];\n    for (let image of images)\n        newImages.push({ 'altText': image.alt, 'originalSrc': image.src })\n    updatedProduct.images = newImages;\n    let newVariants = [];\n    for (let variant of variants)\n        newVariants.push({ 'title': variant.title, 'price': variant.price, 'compareAtPrice': variant.compare_at_price })\n    updatedProduct.variants = newVariants\n    let updated_params = {\n        TableName: 'Shopify_Products',\n        Item: updatedProduct\n    }\n    let awsReq = await docClient.put(updated_params);\n    let res = awsReq.promise();\n    return;\n}"]},"metadata":{},"sourceType":"script"}