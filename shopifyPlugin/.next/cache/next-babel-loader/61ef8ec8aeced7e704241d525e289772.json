{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Page, Layout, TextStyle, EmptyState, Spinner } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport ResourceListWithProducts from '../components/ResourceList';\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nclass Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      open: false,\n      loading: true,\n      products: null\n    });\n\n    _defineProperty(this, \"handleSelection\", resources => {\n      const idsFromResources = resources.selection.map(product => product.id);\n      this.setState({\n        open: false\n      });\n      console.log(idsFromResources);\n      const {\n        loading,\n        error,\n        data\n      } = useQuery(GET_PRODUCTS_BY_ID, {\n        variables: {\n          ids: idsFromResources\n        }\n      });\n      console.log(loading, error, data);\n      store.set('ids', idsFromResources);\n    });\n\n    _defineProperty(this, \"fetchProducts\", async () => {\n      console.log(\"IN Here fetchProducts()\");\n      return await fetch('/api/products').then(res => res.json()).then(response => {\n        return response;\n      }).catch(err => {\n        alert(err);\n        return null;\n      });\n    });\n  }\n\n  async componentDidMount() {\n    console.log(\"Did MOUNT\");\n    let products = await this.fetchProducts();\n    console.log(\"PRODUCTS: \", products);\n    if (products.data == \"Delicious panther\") //IF not products , show \n      //Set products in state\n      this.setState({\n        loading: false\n      });\n  }\n\n  componentWillUnmount() {\n    console.log(\"UNMOUNTINGIGNIG\");\n  }\n\n  render() {\n    const emptyState = this.state.products;\n    const {\n      loading\n    } = this.state;\n    if (loading) return __jsx(Page, null, __jsx(Layout, null, __jsx(EmptyState, {\n      centeredLayout: true,\n      heading: 'Fetching Products from Database...'\n    }, __jsx(Spinner, {\n      accessibilityLabel: \"Spinner\",\n      size: \"large\",\n      color: \"inkLightest\"\n    }))));\n    return __jsx(Page, null, __jsx(TitleBar, {\n      primaryAction: {\n        content: 'Select services',\n        onAction: () => this.setState({\n          open: true\n        })\n      }\n    }), __jsx(ResourcePicker, {\n      resourceType: \"Product\",\n      showVariants: false,\n      open: this.state.open,\n      onSelection: resources => this.handleSelection(resources),\n      onCancel: () => this.setState({\n        open: false\n      })\n    }), emptyState ? __jsx(Layout, null, __jsx(EmptyState, {\n      heading: \"Send Vouchers to your customers to be redeemed in-store.\",\n      action: {\n        content: 'Select Services',\n        onAction: () => this.setState({\n          open: true\n        })\n      },\n      image: img\n    }, __jsx(\"p\", null, \"Select products/services for which to send vouchers to customers via email.\"))) : __jsx(ResourceListWithProducts, null));\n  }\n\n}\n\nexport default Index;\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/pages/index.js"],"names":["Page","Layout","TextStyle","EmptyState","Spinner","ResourcePicker","TitleBar","store","gql","useQuery","ResourceListWithProducts","img","Index","React","Component","open","loading","products","resources","idsFromResources","selection","map","product","id","setState","console","log","error","data","GET_PRODUCTS_BY_ID","variables","ids","set","fetch","then","res","json","response","catch","err","alert","componentDidMount","fetchProducts","componentWillUnmount","render","emptyState","state","content","onAction","handleSelection"],"mappings":"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","sourcesContent":["import { Page, Layout, TextStyle, EmptyState, Spinner } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport ResourceListWithProducts from '../components/ResourceList';\n\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nclass Index extends React.Component {\n    state = { open: false, loading: true, products: null };\n\n    async componentDidMount() {\n        console.log(\"Did MOUNT\")\n        let products = await this.fetchProducts();\n        console.log(\"PRODUCTS: \", products)\n        if (products.data == \"Delicious panther\") //IF not products , show \n            //Set products in state\n            this.setState({ loading: false })\n    }\n\n    componentWillUnmount() {\n        console.log(\"UNMOUNTINGIGNIG\")\n    }\n    render() {\n        const emptyState = this.state.products;\n        const { loading } = this.state;\n        if (loading) return (\n            <Page>\n                <Layout>\n                    <EmptyState centeredLayout heading={'Fetching Products from Database...'}>\n                        <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />\n                    </EmptyState>\n                </Layout>\n            </Page>\n        )\n        return (\n            <Page>\n                <TitleBar\n                    primaryAction={{\n                        content: 'Select services',\n                        onAction: () => this.setState({ open: true })\n                    }} />\n                <ResourcePicker\n                    resourceType=\"Product\"\n                    showVariants={false}\n                    open={this.state.open}\n                    onSelection={(resources) => this.handleSelection(resources)}\n                    onCancel={() => this.setState({ open: false })}\n                />\n                {emptyState ? (\n                    <Layout>\n                        {/* <TextStyle variation=\"positive\">Let's get this BREAD AAASSSAAAPPP</TextStyle> */}\n                        <EmptyState\n                            heading=\"Send Vouchers to your customers to be redeemed in-store.\"\n                            action={{\n                                content: 'Select Services',\n                                onAction: () => this.setState({ open: true })\n                            }}\n                            image={img}>\n                            <p>Select products/services for which to send vouchers to customers via email.</p>\n                        </EmptyState>\n                    </Layout>\n                ) : (\n                        <ResourceListWithProducts />\n                    )}\n            </Page>\n        );\n    }\n    handleSelection = (resources) => {\n        const idsFromResources = resources.selection.map((product) => product.id)\n        this.setState({ open: false })\n        console.log(idsFromResources)\n        const { loading, error, data } = useQuery(GET_PRODUCTS_BY_ID, { variables: { ids: idsFromResources } })\n        console.log(loading, error, data)\n        store.set('ids', idsFromResources)\n    }\n    fetchProducts = async () => {\n        console.log(\"IN Here fetchProducts()\")\n        return await fetch('/api/products')\n            .then(res => res.json())\n            .then(response => {\n                return response\n            })\n            .catch(err => {\n                alert(err)\n                return null\n            })\n    }\n}\n\nexport default Index;\n\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}