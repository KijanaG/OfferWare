{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getProducts($id: [ID!]!) {\\n    nodes(ids: $id) {\\n      ... on Product {\\n        title\\n        descriptionHtml\\n        id\\n        variants(first:4){\\n          edges{\\n            node{\\n              compareAtPrice\\n              price\\n              title\\n            }\\n          }\\n        }\\n        images(first: 10) {\\n          edges {\\n            node {\\n              originalSrc\\n              altText\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail, Button, Form } from '@shopify/polaris';\nimport store from 'store-js';\nimport axios from 'axios';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nvar ResourceListWithProducts = /*#__PURE__*/function (_React$Component) {\n  _inherits(ResourceListWithProducts, _React$Component);\n\n  var _super = _createSuper(ResourceListWithProducts);\n\n  function ResourceListWithProducts() {\n    var _this;\n\n    _classCallCheck(this, ResourceListWithProducts);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      updating: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleUpload\", function (id, index) {\n      var updating = _this.state.updating;\n      updating[id] = true;\n\n      _this.setState({\n        updating: updating\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"postProductToDB\", function (product) {\n      axios.patch('/api/products', {\n        product: product\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function _callee(res) {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.setState({\n                  updating: {}\n                });\n\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(_this.props.fetchProducts());\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })[\"catch\"](function (err) {\n        alert(\"Something went wrong, plase refresh page.\");\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ResourceListWithProducts, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var app = this.context;\n\n      var redirectToProduct = function redirectToProduct() {\n        var redirect = Redirect.create(app);\n        redirect.dispatch(Redirect.Action.APP, '/edit-products');\n      };\n\n      return __jsx(Card, null, __jsx(ResourceList, {\n        showHeader: true,\n        resourceName: {\n          singular: 'Product',\n          plural: 'Products'\n        },\n        items: this.props.products,\n        renderItem: function renderItem(item, _, indx) {\n          var complete = false;\n\n          if (item.streetAddress && item.city && item.email && item.zipCode && item.state && item.businessName && item.merchantDescription) {\n            complete = true;\n          }\n\n          var media = __jsx(Thumbnail, {\n            source: item.images[0] ? item.images[0].originalSrc : '',\n            alt: item.images[0] ? item.images[0].altText : ''\n          });\n\n          return __jsx(ResourceList.Item, {\n            id: item.id,\n            media: media,\n            accessibilityLabel: \"View details for \".concat(item.title),\n            onClick: function onClick() {}\n          }, __jsx(Stack, null, __jsx(Stack.Item, {\n            fill: true\n          }, __jsx(\"h3\", null, \" \", __jsx(TextStyle, {\n            variation: \"strong\"\n          }, \" \", item.title, \" \"), \" \")), __jsx(Stack.Item, null, _this2.state.updating[item.id] ? __jsx(Query, {\n            query: GET_PRODUCT_BY_ID,\n            variables: {\n              id: [item.id]\n            }\n          }, function (_ref) {\n            var data = _ref.data,\n                loading = _ref.loading,\n                error = _ref.error;\n            if (error) return __jsx(TextStyle, null, error.message);\n            if (data) _this2.postProductToDB(data.nodes[0]);\n            return __jsx(Button, {\n              loading: _this2.state.updating[item.id],\n              primary: true\n            }, \"Update Item\");\n          }) : __jsx(Form, {\n            onSubmit: function onSubmit() {\n              return _this2.handleUpload(item.id, indx);\n            },\n            preventDefault: true\n          }, __jsx(Button, {\n            loading: false,\n            submit: true,\n            primary: true\n          }, \"Update Item\"))), __jsx(Stack.Item, null, \"\\xA0 \", item.redeemedTotal, \"/\", item.transactionTotal, \" \\xA0\"), __jsx(Stack.Item, null, __jsx(\"div\", {\n            style: {\n              color: complete ? \"green\" : \"red\"\n            }\n          }, __jsx(Button, {\n            monochrome: true,\n            outline: true,\n            onClick: function onClick() {\n              store.set('product', item);\n              redirectToProduct();\n            }\n          }, complete ? \" Complete \" : \"Incomplete\", \" \")))));\n        }\n      }));\n    }\n  }]);\n\n  return ResourceListWithProducts;\n}(React.Component);\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;\nvar GET_PRODUCT_BY_ID = gql(_templateObject());","map":null,"metadata":{},"sourceType":"module"}