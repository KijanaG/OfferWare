{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail, Button, Form } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      updating: {},\n      loading: {}\n    });\n\n    _defineProperty(this, \"handleUpload\", id => {\n      let updating = _objectSpread({}, this.state.updating);\n\n      updating[id] = true;\n      this.setState({\n        updating\n      });\n    });\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    console.log(this.state);\n    return __jsx(Card, null, __jsx(ResourceList, {\n      showHeader: true,\n      resourceName: {\n        singular: 'Product',\n        plural: 'Products'\n      },\n      items: this.props.products,\n      renderItem: item => {\n        let complete = false;\n\n        if (item.streetAddress && item.city && item.email && item.zipCode && item.state && item.businessName && item.merchantDescription) {\n          complete = true;\n        }\n\n        const media = __jsx(Thumbnail, {\n          source: item.images[0] ? item.images[0].originalSrc : '',\n          alt: item.images[0] ? item.images[0].altText : ''\n        });\n\n        return __jsx(ResourceList.Item, {\n          id: item.id,\n          media: media,\n          accessibilityLabel: `View details for ${item.title}`\n        }, __jsx(Stack, null, __jsx(Stack.Item, {\n          fill: true\n        }, __jsx(\"h3\", null, \" \", __jsx(TextStyle, {\n          variation: \"strong\"\n        }, \" \", item.title, \" \"), \" \")), __jsx(Stack.Item, null, console.log(this.state), this.state.updating[item.id] ? __jsx(Button, {\n          loading: true,\n          primary: true\n        }, \"Update Item\") : __jsx(Form, {\n          loading: this.state.updating[item.id],\n          onSubmit: () => this.handleUpload(item.id),\n          preventDefault: true\n        }, __jsx(Button, {\n          submit: true,\n          primary: true\n        }, \"Update Item\")), \"\\xA0 12/30 \\xA0\", __jsx(\"div\", {\n          style: {\n            color: complete ? \"green\" : \"red\"\n          }\n        }, __jsx(Button, {\n          monochrome: true,\n          outline: true,\n          onClick: () => {\n            store.set('product', item);\n            redirectToProduct();\n          }\n        }, complete ? \"Complete\" : \"Incomplete\", \" \")))));\n      }\n    }));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        descriptionHtml\n        id\n        variants(first:4){\n          edges{\n            node{\n              compareAtPrice\n              price\n              title\n            }\n          }\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/components/ResourceList.js"],"names":["Card","ResourceList","Stack","TextStyle","Thumbnail","Button","Form","store","Redirect","Context","gql","Query","ResourceListWithProducts","React","Component","updating","loading","id","state","setState","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","console","log","singular","plural","props","products","item","complete","streetAddress","city","email","zipCode","businessName","merchantDescription","media","images","originalSrc","altText","title","handleUpload","color","set","GET_PRODUCTS_BY_ID"],"mappings":"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","sourcesContent":["import { Card, ResourceList, Stack, TextStyle, Thumbnail, Button, Form } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nclass ResourceListWithProducts extends React.Component {\n    state = {\n        updating: {},\n        loading: {}\n    }\n    static contextType = Context;\n    handleUpload = (id) => {\n        let updating = { ...this.state.updating }\n        updating[id] = true\n        this.setState({ updating })\n    }\n    render() {\n        const app = this.context;\n        const redirectToProduct = () => {\n            const redirect = Redirect.create(app);\n            redirect.dispatch(\n                Redirect.Action.APP,\n                '/edit-products',\n            )\n        }\n        console.log(this.state)\n        return (\n            <Card>\n                <ResourceList showHeader resourceName={{ singular: 'Product', plural: 'Products' }}\n                    items={this.props.products}\n                    renderItem={(item) => {\n                        let complete = false;\n                        if (item.streetAddress && item.city && item.email && item.zipCode\n                            && item.state && item.businessName && item.merchantDescription) {\n                            complete = true\n                        }\n                        const media = (\n                            <Thumbnail\n                                source={item.images[0] ? item.images[0].originalSrc : ''}\n                                alt={item.images[0] ? item.images[0].altText : ''} />\n                        );\n                        return (\n                            <ResourceList.Item id={item.id} media={media}\n                                accessibilityLabel={`View details for ${item.title}`} >\n                                <Stack>\n                                    <Stack.Item fill>\n                                        <h3> <TextStyle variation=\"strong\"> {item.title} </TextStyle> </h3>\n                                    </Stack.Item>\n                                    <Stack.Item>\n                                        {console.log(this.state)}\n                                        {this.state.updating[item.id] ?\n                                            <Button loading={true} primary>Update Item</Button>\n                                            :\n                                            <Form loading={this.state.updating[item.id]} onSubmit={() => this.handleUpload(item.id)} preventDefault={true}>\n                                                <Button submit primary>Update Item</Button>\n                                            </Form>\n                                        }\n                                    &nbsp; 12/30 &nbsp;\n                                    <div style={{ color: complete ? \"green\" : \"red\" }}>\n                                            <Button monochrome outline onClick={() => { store.set('product', item); redirectToProduct(); }}>{complete ? \"Complete\" : \"Incomplete\"} </Button>\n                                        </div>\n                                    </Stack.Item>\n                                </Stack>\n                            </ResourceList.Item>\n                        );\n                    }}\n                />\n            </Card>\n        );\n    }\n}\n\nexport default ResourceListWithProducts;\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        descriptionHtml\n        id\n        variants(first:4){\n          edges{\n            node{\n              compareAtPrice\n              price\n              title\n            }\n          }\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n`;"]},"metadata":{},"sourceType":"module"}