{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Page, Layout, TextStyle, EmptyState, Spinner } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport axios from 'axios';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport ResourceListWithProducts from '../components/ResourceList';\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nclass Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      open: false,\n      loadingDB: true,\n      products: [],\n      productIDs: null\n    });\n\n    _defineProperty(this, \"postNewProductsToDB\", products => {\n      axios.post('/api/products', {\n        products: products.nodes\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(async res => {\n        await this.fetchProducts();\n        this.setState({\n          productIDs: null\n        });\n      }).catch(err => {\n        alert(\"Failed To Update Database, Please Try Again.\");\n      });\n    });\n\n    _defineProperty(this, \"handleSelection\", async resources => {\n      const idsFromResources = resources.selection.map(product => product.id);\n      this.setState({\n        open: false,\n        productIDs: idsFromResources\n      });\n    });\n\n    _defineProperty(this, \"fetchProducts\", async () => {\n      return await fetch('/api/products').then(res => res.json()).then(response => {\n        this.setState({\n          products: response.data,\n          loadingDB: false\n        });\n        return true;\n      }).catch(err => {\n        alert(err);\n        return null;\n      });\n    });\n  }\n\n  async componentDidMount() {\n    this.fetchProducts();\n  }\n\n  render() {\n    const emptyState = this.state.products.length === 0;\n    const {\n      loadingDB,\n      productIDs\n    } = this.state;\n\n    if (loadingDB) {\n      //Fetching Products from Database \n      return __jsx(Page, null, __jsx(Layout, null, __jsx(EmptyState, {\n        centeredLayout: true,\n        heading: 'Fetching Products from Database...'\n      }, __jsx(Spinner, {\n        accessibilityLabel: \"Spinner\",\n        size: \"large\",\n        color: \"inkLightest\"\n      }))));\n    }\n\n    if (productIDs) {\n      return (//If exists, user gave Voucher functionality to these products\n        __jsx(Page, null, __jsx(Layout, null, __jsx(EmptyState, {\n          centeredLayout: true,\n          heading: 'Adding Specified Products to Database...'\n        }, __jsx(Query, {\n          query: GET_PRODUCTS_BY_ID,\n          variables: {\n            ids: productIDs\n          }\n        }, ({\n          data,\n          loading,\n          error\n        }) => {\n          if (loading) return __jsx(Spinner, {\n            accessibilityLabel: \"Spinner\",\n            size: \"large\",\n            color: \"inkLightest\"\n          });\n          if (error) return __jsx(\"div\", null, error.message);else {\n            this.postNewProductsToDB(data);\n            return __jsx(Spinner, {\n              accessibilityLabel: \"Spinner\",\n              size: \"large\",\n              color: \"inkLightest\"\n            });\n          }\n        }))))\n      );\n    }\n\n    return __jsx(Page, null, __jsx(TitleBar, {\n      primaryAction: {\n        content: 'Select services',\n        onAction: () => this.setState({\n          open: true\n        })\n      }\n    }), __jsx(ResourcePicker, {\n      resourceType: \"Product\",\n      showVariants: false,\n      open: this.state.open,\n      onSelection: resources => this.handleSelection(resources),\n      onCancel: () => this.setState({\n        open: false\n      })\n    }), emptyState ? __jsx(Layout, null, __jsx(EmptyState, {\n      heading: \"Send Vouchers to your customers to be redeemed in-store.\",\n      action: {\n        content: 'Select Services',\n        onAction: () => this.setState({\n          open: true\n        })\n      },\n      image: img\n    }, __jsx(\"p\", null, \"Select products/services for which to send vouchers to customers via email.\"))) : __jsx(ResourceListWithProducts, {\n      fetchProducts: this.fetchProducts,\n      products: this.state.products\n    }));\n  }\n\n}\n\nexport default Index;\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        descriptionHtml\n        id\n        variants(first:4){\n          edges{\n            node{\n              compareAtPrice\n              price\n              title\n            }\n          }\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n`;","map":null,"metadata":{},"sourceType":"module"}