{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst dotenv = require('dotenv');\n\nconst AWS = require('aws-sdk');\n\nconst sgMail = require('@sendgrid/mail');\n\nconst short = require('short-uuid');\n\nconst NodeGeocoder = require('node-geocoder');\n\nconst geocoder = NodeGeocoder({\n  apiKey: 'AIzaSyAfTmvVvLL6-SdQy6O5GcgiG3vxoDDEhic',\n  formatter: null\n});\ndotenv.config();\nsgMail.setApiKey(process.env.sendGridKey);\nAWS.config.update({\n  region: 'us-west-2',\n  credentials: {\n    accessKeyId: process.env.accessKeyId,\n    secretAccessKey: process.env.secretAccessKey\n  }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\nmodule.exports = {\n  getCoords: async (street, city, zipCode, state) => {\n    let res = await geocoder.geocode(`${street} ${city}, ${state} ${zipCode}`);\n    console.log(res);\n    return \"HELLLO\";\n  },\n  sendVoucherLink: async (shop, email, title, variant_title, id) => {\n    const p_params = {\n      TableName: 'Shopify_Products',\n      FilterExpression: 'shopOrigin = :shop and title = :t',\n      ExpressionAttributeValues: {\n        ':shop': shop,\n        ':t': title\n      }\n    };\n    let awsRequest = await docClient.scan(p_params);\n    let result = await awsRequest.promise();\n\n    if (result.Items.length > 0) {\n      console.log(\"Received Item\");\n      const transaction_id = short.generate();\n      const v_code = Date.now().toString();\n      let variantPurchased = null;\n\n      for (let variant of result.Items[0].variants) {\n        if (variant.title == variant_title) {\n          variantPurchased = variant;\n          variantPurchased.variant_title = variant_title;\n          variantPurchased.title = title;\n        }\n      } //Check if transaction has already been made due to faulty webhook\n\n\n      const check_params = {\n        TableName: 'Deal_Transactions',\n        FilterExpression: 'order_id = :id and variant_title =:v',\n        ExpressionAttributeValues: {\n          ':id': id,\n          ':v': variant_title.length > 0 ? variant_title : null\n        }\n      };\n      let awsTReq = await docClient.scan(check_params);\n      let tResult = await awsTReq.promise();\n      if (tResult.Items.length > 0) return; //Get variant from variant array & add to transaction\n\n      const t_params = {\n        TableName: 'Deal_Transactions',\n        Item: _objectSpread({\n          transaction_id,\n          order_id: id,\n          email,\n          shopOrigin: shop\n        }, variantPurchased, {\n          time_purchased: Date.now(),\n          v_code: v_code.substring(v_code.length - 5),\n          time_redeemed: null,\n          rating: null,\n          review: null,\n          status: 'PURCHASED',\n          vendor: result.Items[0].id\n        })\n      };\n      awsRequest = await docClient.put(t_params);\n      let res = await awsRequest.promise();\n      if (Object.keys(res).length > 0) return false;\n      console.log(\"Created Transaction\");\n      let link = `https://scottsdeal.offerware.co/${transaction_id}/redeem/${result.Items[0].id}?shop=${shop}`; // Eventually replace variant in email for more targerted content\n      // if (!result.Items[0].email) return //Temporary while developing\n\n      let sendEmail = result.Items[0].email.replace('{{Auto-Generated Link}}', link);\n      console.log(sendEmail);\n      const msg = {\n        to: email,\n        from: 'scottsdeal@offerware.co',\n        subject: `Your Voucher Link for: ${variant_title}.`,\n        text: sendEmail\n      };\n      let resMail = await sgMail.send(msg);\n      return true;\n    }\n  },\n  updateProductInDB: async (title, handle, shop, descriptionHtml, images, variants) => {\n    console.log(\"UPDATING\");\n    const title_params = {\n      TableName: 'Shopify_Products',\n      FilterExpression: 'shopOrigin = :shop and title = :t',\n      ExpressionAttributeValues: {\n        ':shop': shop,\n        ':t': title\n      }\n    };\n    let awsRequest = docClient.scan(title_params);\n    let result = await awsRequest.promise();\n    let updatedProduct = null; // First check If title did not change & update db if found\n\n    if (result.Items.length > 0) {\n      updatedProduct = _objectSpread({}, result.Items[0], {\n        title,\n        handle,\n        descriptionHtml\n      });\n      await updateDB(updatedProduct, images, variants);\n      return;\n    } else {\n      // Check if handle did not change & update db if found\n      const handle_params = {\n        TableName: 'Shopify_Products',\n        FilterExpression: 'shopOrigin = :shop and handle = :h',\n        ExpressionAttributeValues: {\n          ':shop': shop,\n          ':h': handle\n        }\n      };\n      awsRequest = docClient.scan(handle_params);\n      result = await awsRequest.promise();\n      if (result.Items.length > 0) updatedProduct = _objectSpread({}, result.Items[0], {\n        title,\n        handle,\n        descriptionHtml\n      });\n      await updateDB(updatedProduct, images, variants); // else do nothing because Shopify Admin did not subscribe\n      // to Voucher capabilities with this products\n\n      return;\n    }\n  }\n};\n\nasync function updateDB(updatedProduct, images, variants) {\n  let newImages = [];\n\n  for (let image of images) newImages.push({\n    'altText': image.alt,\n    'originalSrc': image.src\n  });\n\n  updatedProduct.images = newImages;\n  let newVariants = [];\n\n  for (let variant of variants) newVariants.push({\n    'title': variant.title,\n    'price': variant.price,\n    'compareAtPrice': variant.compare_at_price\n  });\n\n  updatedProduct.variants = newVariants;\n  let updated_params = {\n    TableName: 'Shopify_Products',\n    Item: updatedProduct\n  };\n  let awsReq = await docClient.put(updated_params);\n  let res = awsReq.promise();\n  return;\n}","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/api.js"],"names":["dotenv","require","AWS","sgMail","short","NodeGeocoder","geocoder","apiKey","formatter","config","setApiKey","process","env","sendGridKey","update","region","credentials","accessKeyId","secretAccessKey","docClient","DynamoDB","DocumentClient","module","exports","getCoords","street","city","zipCode","state","res","geocode","console","log","sendVoucherLink","shop","email","title","variant_title","id","p_params","TableName","FilterExpression","ExpressionAttributeValues","awsRequest","scan","result","promise","Items","length","transaction_id","generate","v_code","Date","now","toString","variantPurchased","variant","variants","check_params","awsTReq","tResult","t_params","Item","order_id","shopOrigin","time_purchased","substring","time_redeemed","rating","review","status","vendor","put","Object","keys","link","sendEmail","replace","msg","to","from","subject","text","resMail","send","updateProductInDB","handle","descriptionHtml","images","title_params","updatedProduct","updateDB","handle_params","newImages","image","push","alt","src","newVariants","price","compare_at_price","updated_params","awsReq"],"mappings":"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","sourcesContent":["const dotenv = require('dotenv');\nconst AWS = require('aws-sdk');\nconst sgMail = require('@sendgrid/mail');\nconst short = require('short-uuid');\nconst NodeGeocoder = require('node-geocoder');\nconst geocoder = NodeGeocoder({\n    apiKey: 'AIzaSyAfTmvVvLL6-SdQy6O5GcgiG3vxoDDEhic',\n    formatter: null\n})\ndotenv.config();\nsgMail.setApiKey(process.env.sendGridKey);\nAWS.config.update({\n    region: 'us-west-2', credentials: {\n        accessKeyId: process.env.accessKeyId,\n        secretAccessKey: process.env.secretAccessKey\n    }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\n\n\nmodule.exports = {\n    getCoords: async (street, city, zipCode, state) => {\n        let res =  await geocoder.geocode(`${street} ${city}, ${state} ${zipCode}`)\n        console.log(res)\n        return \"HELLLO\"\n    },\n    sendVoucherLink: async (shop, email, title, variant_title, id) => {\n        const p_params = {\n            TableName: 'Shopify_Products',\n            FilterExpression: 'shopOrigin = :shop and title = :t',\n            ExpressionAttributeValues: { ':shop': shop, ':t': title }\n        }\n        let awsRequest = await docClient.scan(p_params);\n        let result = await awsRequest.promise();\n        if (result.Items.length > 0) {\n            console.log(\"Received Item\")\n            const transaction_id = short.generate();\n            const v_code = Date.now().toString();\n            let variantPurchased = null;\n            for (let variant of result.Items[0].variants) {\n                if (variant.title == variant_title) {\n                    variantPurchased = variant\n                    variantPurchased.variant_title = variant_title;\n                    variantPurchased.title = title\n                }\n            }\n            //Check if transaction has already been made due to faulty webhook\n            const check_params = {\n                TableName: 'Deal_Transactions',\n                FilterExpression: 'order_id = :id and variant_title =:v',\n                ExpressionAttributeValues: { ':id': id, ':v': variant_title.length > 0 ? variant_title : null }\n            }\n            let awsTReq = await docClient.scan(check_params)\n            let tResult = await awsTReq.promise()\n            if (tResult.Items.length > 0) return\n            //Get variant from variant array & add to transaction\n            const t_params = {\n                TableName: 'Deal_Transactions',\n                Item: {\n                    transaction_id, order_id: id, email, shopOrigin: shop,\n                    ...variantPurchased, time_purchased: Date.now(),\n                    v_code: v_code.substring(v_code.length - 5),\n                    time_redeemed: null, rating: null, review: null,\n                    status: 'PURCHASED', vendor: result.Items[0].id\n                }\n            }\n            awsRequest = await docClient.put(t_params);\n            let res = await awsRequest.promise();\n            if (Object.keys(res).length > 0) return false\n            console.log(\"Created Transaction\")\n            let link = `https://scottsdeal.offerware.co/${transaction_id}/redeem/${result.Items[0].id}?shop=${shop}`\n            // Eventually replace variant in email for more targerted content\n            // if (!result.Items[0].email) return //Temporary while developing\n            let sendEmail = result.Items[0].email.replace('{{Auto-Generated Link}}', link)\n            console.log(sendEmail)\n            const msg = {\n                to: email, from: 'scottsdeal@offerware.co',\n                subject: `Your Voucher Link for: ${variant_title}.`,\n                text: sendEmail,\n            }\n            let resMail = await sgMail.send(msg)\n            return true\n        }\n    },\n    updateProductInDB: async (title, handle, shop, descriptionHtml, images, variants) => {\n        console.log(\"UPDATING\")\n        const title_params = {\n            TableName: 'Shopify_Products',\n            FilterExpression: 'shopOrigin = :shop and title = :t',\n            ExpressionAttributeValues: { ':shop': shop, ':t': title }\n        }\n        let awsRequest = docClient.scan(title_params);\n        let result = await awsRequest.promise();\n        let updatedProduct = null;\n        // First check If title did not change & update db if found\n        if (result.Items.length > 0) {\n            updatedProduct = { ...result.Items[0], title, handle, descriptionHtml }\n            await updateDB(updatedProduct, images, variants)\n            return\n        } else { // Check if handle did not change & update db if found\n            const handle_params = {\n                TableName: 'Shopify_Products',\n                FilterExpression: 'shopOrigin = :shop and handle = :h',\n                ExpressionAttributeValues: { ':shop': shop, ':h': handle }\n            }\n            awsRequest = docClient.scan(handle_params);\n            result = await awsRequest.promise();\n            if (result.Items.length > 0)\n                updatedProduct = { ...result.Items[0], title, handle, descriptionHtml }\n            await updateDB(updatedProduct, images, variants)\n            // else do nothing because Shopify Admin did not subscribe\n            // to Voucher capabilities with this products\n            return\n        }\n    },\n}\n\nasync function updateDB(updatedProduct, images, variants) {\n    let newImages = [];\n    for (let image of images)\n        newImages.push({ 'altText': image.alt, 'originalSrc': image.src })\n    updatedProduct.images = newImages;\n    let newVariants = [];\n    for (let variant of variants)\n        newVariants.push({ 'title': variant.title, 'price': variant.price, 'compareAtPrice': variant.compare_at_price })\n    updatedProduct.variants = newVariants\n    let updated_params = {\n        TableName: 'Shopify_Products',\n        Item: updatedProduct\n    }\n    let awsReq = await docClient.put(updated_params);\n    let res = awsReq.promise();\n    return;\n}"]},"metadata":{},"sourceType":"script"}