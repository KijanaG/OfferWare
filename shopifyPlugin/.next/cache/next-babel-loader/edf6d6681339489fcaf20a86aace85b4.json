{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidCatch\", (error, errorInfo) => catchFunc(error, errorInfo, this));\n\n    this.state = {\n      error: null,\n      errorInfo: null\n    };\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      return handleError(this);\n    } // Normally, just render children\n\n\n    return this.props.children;\n  }\n\n}\nexport const withErrorBoundary = WrappedComponent => {\n  var _temp;\n\n  return _temp = class extends Component {\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"componentDidCatch\", (error, errorInfo) => catchFunc(error, errorInfo, this));\n\n      this.state = {\n        error: null,\n        errorInfo: null\n      };\n    }\n\n    render() {\n      if (this.state.errorInfo) {\n        return handleError(this);\n      } // Normally, just render children\n\n\n      return __jsx(WrappedComponent, this.props);\n    }\n\n  }, _temp;\n};\n\nconst catchFunc = (error, errorInfo, ctx) => {\n  // catch errors in any components below and re-render with error message\n  ctx.setState({\n    error: error,\n    errorInfo: errorInfo\n  }); // log error messages, etc.\n};\n\nconst handleError = ctx => // Error path\n__jsx(\"div\", {\n  style: ctx.props.style || styles.error\n}, __jsx(\"h2\", null, \"Something went wrong.\"), __jsx(\"details\", {\n  style: {\n    whiteSpace: 'pre-wrap'\n  }\n}, ctx.state.error && ctx.state.error.toString(), __jsx(\"br\", null), ctx.state.errorInfo.componentStack));\n\nconst styles = {\n  error: {\n    backgroundColor: '#f98e7e',\n    borderTop: '1px solid #777',\n    borderBottom: '1px solid #777',\n    padding: '12px'\n  }\n};","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/components/ErrorBoundary.js"],"names":["React","Component","ErrorBoundary","constructor","props","error","errorInfo","catchFunc","state","render","handleError","children","withErrorBoundary","WrappedComponent","ctx","setState","style","styles","whiteSpace","toString","componentStack","backgroundColor","borderTop","borderBottom","padding"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,aAAN,SAA4BD,SAA5B,CAAsC;AACnDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,+CAKC,CAACC,KAAD,EAAQC,SAAR,KAAsBC,SAAS,CAACF,KAAD,EAAQC,SAAR,EAAmB,IAAnB,CALhC;;AAEjB,SAAKE,KAAL,GAAa;AAAEH,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,SAAS,EAAE;AAA1B,KAAb;AACD;;AAIDG,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKD,KAAL,CAAWF,SAAf,EAA0B;AACxB,aAAOI,WAAW,CAAC,IAAD,CAAlB;AACD,KAHM,CAIP;;;AACA,WAAO,KAAKN,KAAL,CAAWO,QAAlB;AACD;;AAdkD;AAiBrD,OAAO,MAAMC,iBAAiB,GAAGC,gBAAgB;AAAA;;AAAA,iBAC/C,cAAcZ,SAAd,CAAwB;AACtBE,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;;AADiB,iDAKC,CAACC,KAAD,EAAQC,SAAR,KAAsBC,SAAS,CAACF,KAAD,EAAQC,SAAR,EAAmB,IAAnB,CALhC;;AAEjB,WAAKE,KAAL,GAAa;AAAEH,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,SAAS,EAAE;AAA1B,OAAb;AACD;;AAIDG,IAAAA,MAAM,GAAG;AACP,UAAI,KAAKD,KAAL,CAAWF,SAAf,EAA0B;AACxB,eAAOI,WAAW,CAAC,IAAD,CAAlB;AACD,OAHM,CAIP;;;AACA,aAAO,MAAC,gBAAD,EAAsB,KAAKN,KAA3B,CAAP;AACD;;AAdqB,GADuB;AAAA,CAA1C;;AAmBP,MAAMG,SAAS,GAAG,CAACF,KAAD,EAAQC,SAAR,EAAmBQ,GAAnB,KAA2B;AAC3C;AACAA,EAAAA,GAAG,CAACC,QAAJ,CAAa;AACXV,IAAAA,KAAK,EAAEA,KADI;AAEXC,IAAAA,SAAS,EAAEA;AAFA,GAAb,EAF2C,CAM3C;AACD,CAPD;;AASA,MAAMI,WAAW,GAAII,GAAD,IAClB;AACA;AAAK,EAAA,KAAK,EAAEA,GAAG,CAACV,KAAJ,CAAUY,KAAV,IAAmBC,MAAM,CAACZ;AAAtC,GACE,0CADF,EAEE;AAAS,EAAA,KAAK,EAAE;AAAEa,IAAAA,UAAU,EAAE;AAAd;AAAhB,GACGJ,GAAG,CAACN,KAAJ,CAAUH,KAAV,IAAmBS,GAAG,CAACN,KAAJ,CAAUH,KAAV,CAAgBc,QAAhB,EADtB,EAEE,iBAFF,EAGGL,GAAG,CAACN,KAAJ,CAAUF,SAAV,CAAoBc,cAHvB,CAFF,CAFF;;AAYA,MAAMH,MAAM,GAAG;AACbZ,EAAAA,KAAK,EAAE;AACLgB,IAAAA,eAAe,EAAE,SADZ;AAELC,IAAAA,SAAS,EAAE,gBAFN;AAGLC,IAAAA,YAAY,EAAE,gBAHT;AAILC,IAAAA,OAAO,EAAE;AAJJ;AADM,CAAf","sourcesContent":["import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch = (error, errorInfo) => catchFunc(error, errorInfo, this)\n\n  render() {\n    if (this.state.errorInfo) {\n      return handleError(this)\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n\nexport const withErrorBoundary = WrappedComponent => (\n  class extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { error: null, errorInfo: null };\n    }\n\n    componentDidCatch = (error, errorInfo) => catchFunc(error, errorInfo, this)\n\n    render() {\n      if (this.state.errorInfo) {\n        return handleError(this)\n      }\n      // Normally, just render children\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n);\n\nconst catchFunc = (error, errorInfo, ctx) => {\n  // catch errors in any components below and re-render with error message\n  ctx.setState({\n    error: error,\n    errorInfo: errorInfo\n  })\n  // log error messages, etc.\n}\n\nconst handleError = (ctx) => (\n  // Error path\n  <div style={ctx.props.style || styles.error}>\n    <h2>Something went wrong.</h2>\n    <details style={{ whiteSpace: 'pre-wrap' }}>\n      {ctx.state.error && ctx.state.error.toString()}\n      <br />\n      {ctx.state.errorInfo.componentStack}\n    </details>\n  </div>\n);\n\nconst styles = {\n  error: {\n    backgroundColor: '#f98e7e',\n    borderTop: '1px solid #777',\n    borderBottom: '1px solid #777',\n    padding: '12px',\n  }\n}"]},"metadata":{},"sourceType":"module"}