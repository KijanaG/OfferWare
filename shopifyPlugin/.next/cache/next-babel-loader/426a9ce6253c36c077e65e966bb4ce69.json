{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getProducts($ids: [ID!]!) {\\n    nodes(ids: $ids) {\\n      ... on Product {\\n        title\\n        handle\\n        descriptionHtml\\n        id\\n        images(first: 10) {\\n          edges {\\n            node {\\n              originalSrc\\n              altText\\n            }\\n          }\\n        }\\n        variants(first: 1) {\\n          edges {\\n            node {\\n              price\\n              id\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Page, Layout, TextStyle, EmptyState, Spinner } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport ResourceListWithProducts from '../components/ResourceList';\nvar img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nvar Index = /*#__PURE__*/function (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  var _super = _createSuper(Index);\n\n  function Index() {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      open: false,\n      loadingDB: true,\n      products: null,\n      productIDs: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"postNewProductsToDB\", function _callee(products) {\n      var fetchedProducts;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"******\", products, \"********\");\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(_this.fetchProducts());\n\n            case 3:\n              fetchedProducts = _context.sent;\n\n              _this.setState({\n                products: fetchedProducts\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelection\", function _callee2(resources) {\n      var idsFromResources;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              idsFromResources = resources.selection.map(function (product) {\n                return product;\n              });\n\n              _this.setState({\n                open: false\n              });\n\n              console.log(idsFromResources, \"^&^%%^%^%^%^\"); // await getProducts(idsFromResources)\n\n              _this.setState({\n                productIDs: idsFromResources\n              }); // store.set('ids', idsFromResources)\n\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchProducts\", function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log(\"IN Here fetchProducts()\");\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(fetch('/api/products').then(function (res) {\n                return res.json();\n              }).then(function (response) {\n                return response;\n              })[\"catch\"](function (err) {\n                alert(err);\n                return null;\n              }));\n\n            case 3:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var products;\n      return _regeneratorRuntime.async(function componentDidMount$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              console.log(\"Did MOUNT\");\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(this.fetchProducts());\n\n            case 3:\n              products = _context4.sent;\n              console.log(\"PRODUCTS: \", products);\n              if (products.data == \"Delicious panther\") //IF not products , show \n                //Set products in state\n                this.setState({\n                  loadingDB: false\n                });\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log(\"UNMOUNTINGIGNIG\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var emptyState = this.state.products === null;\n      var _this$state = this.state,\n          loadingDB = _this$state.loadingDB,\n          productIDs = _this$state.productIDs;\n\n      if (loadingDB) {\n        //Fetching Products from Database \n        __jsx(Page, null, __jsx(Layout, null, __jsx(EmptyState, {\n          centeredLayout: true,\n          heading: 'Fetching Products from Database...'\n        }, __jsx(Spinner, {\n          accessibilityLabel: \"Spinner\",\n          size: \"large\",\n          color: \"inkLightest\"\n        }))));\n      }\n\n      if (productIDs) return (//If exists, user gave Voucher functionality to these products\n        __jsx(Page, null, __jsx(Layout, null, __jsx(EmptyState, {\n          centeredLayout: true,\n          heading: 'Adding Specified Products to Database...'\n        }, __jsx(Query, {\n          query: GET_PRODUCTS_BY_ID,\n          variables: {\n            ids: productIDs\n          }\n        }, function (_ref) {\n          var data = _ref.data,\n              loading = _ref.loading,\n              error = _ref.error;\n          if (loading) return __jsx(Spinner, {\n            accessibilityLabel: \"Spinner\",\n            size: \"large\",\n            color: \"inkLightest\"\n          });\n          if (error) return __jsx(\"div\", null, error.message);else {\n            console.log(\"GOT DATA\", data);\n\n            _this2.postNewProductsToDB(data);\n\n            return __jsx(Spinner, {\n              accessibilityLabel: \"Spinner\",\n              size: \"large\",\n              color: \"inkLightest\"\n            });\n          }\n        }))))\n      );\n      return __jsx(Page, null, __jsx(TitleBar, {\n        primaryAction: {\n          content: 'Select services',\n          onAction: function onAction() {\n            return _this2.setState({\n              open: true\n            });\n          }\n        }\n      }), __jsx(ResourcePicker, {\n        resourceType: \"Product\",\n        showVariants: false,\n        open: this.state.open,\n        onSelection: function onSelection(resources) {\n          return _this2.handleSelection(resources);\n        },\n        onCancel: function onCancel() {\n          return _this2.setState({\n            open: false\n          });\n        }\n      }), emptyState ? __jsx(Layout, null, __jsx(EmptyState, {\n        heading: \"Send Vouchers to your customers to be redeemed in-store.\",\n        action: {\n          content: 'Select Services',\n          onAction: function onAction() {\n            return _this2.setState({\n              open: true\n            });\n          }\n        },\n        image: img\n      }, __jsx(\"p\", null, \"Select products/services for which to send vouchers to customers via email.\"))) : __jsx(ResourceListWithProducts, null));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;\nvar GET_PRODUCTS_BY_ID = gql(_templateObject());","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/pages/index.js"],"names":["Page","Layout","TextStyle","EmptyState","Spinner","ResourcePicker","TitleBar","store","gql","Query","ResourceListWithProducts","img","Index","open","loadingDB","products","productIDs","console","log","fetchProducts","fetchedProducts","setState","resources","idsFromResources","selection","map","product","fetch","then","res","json","response","err","alert","data","emptyState","state","GET_PRODUCTS_BY_ID","ids","loading","error","message","postNewProductsToDB","content","onAction","handleSelection","React","Component"],"mappings":"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","sourcesContent":["import { Page, Layout, TextStyle, EmptyState, Spinner } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport ResourceListWithProducts from '../components/ResourceList';\n\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nclass Index extends React.Component {\n    state = { open: false, loadingDB: true, products: null, productIDs: null };\n\n    async componentDidMount() {\n        console.log(\"Did MOUNT\")\n        let products = await this.fetchProducts();\n        console.log(\"PRODUCTS: \", products)\n        if (products.data == \"Delicious panther\") //IF not products , show \n            //Set products in state\n            this.setState({ loadingDB: false })\n    }\n\n    componentWillUnmount() {\n        console.log(\"UNMOUNTINGIGNIG\")\n    }\n    render() {\n        const emptyState = this.state.products === null;\n        const { loadingDB, productIDs } = this.state;\n        if (loadingDB) { //Fetching Products from Database \n            <Page>\n                <Layout>\n                    <EmptyState centeredLayout heading={'Fetching Products from Database...'}>\n                        <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />\n                    </EmptyState>\n                </Layout>\n            </Page>\n        }\n        if (productIDs) return ( //If exists, user gave Voucher functionality to these products\n            <Page>\n                <Layout>\n                    <EmptyState centeredLayout heading={'Adding Specified Products to Database...'}>\n                        <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: productIDs }}>\n                            {({ data, loading, error }) => {\n                                if (loading) return <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />;\n                                if (error) return <div>{error.message}</div>\n                                else {\n                                    console.log(\"GOT DATA\", data)\n                                    this.postNewProductsToDB(data);\n                                    return <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />;\n                                }\n                            }}\n                        </Query>\n                    </EmptyState>\n                </Layout>\n            </Page>\n        )\n        return (\n            <Page>\n                <TitleBar\n                    primaryAction={{\n                        content: 'Select services',\n                        onAction: () => this.setState({ open: true })\n                    }} />\n                <ResourcePicker\n                    resourceType=\"Product\"\n                    showVariants={false}\n                    open={this.state.open}\n                    onSelection={(resources) => this.handleSelection(resources)}\n                    onCancel={() => this.setState({ open: false })}\n                />\n                {emptyState ? (\n                    <Layout>\n                        {/* <TextStyle variation=\"positive\">Let's get this BREAD AAASSSAAAPPP</TextStyle> */}\n                        <EmptyState\n                            heading=\"Send Vouchers to your customers to be redeemed in-store.\"\n                            action={{\n                                content: 'Select Services',\n                                onAction: () => this.setState({ open: true })\n                            }}\n                            image={img}>\n                            <p>Select products/services for which to send vouchers to customers via email.</p>\n                        </EmptyState>\n                    </Layout>\n                ) : (\n                        <ResourceListWithProducts />\n                    )}\n            </Page>\n        );\n    }\n\n    postNewProductsToDB = async (products) => {\n        console.log(\"******\", products, \"********\")\n        let fetchedProducts = await this.fetchProducts();\n        this.setState({ products: fetchedProducts })\n    }\n    handleSelection = async (resources) => {\n        const idsFromResources = resources.selection.map((product) => product)\n        this.setState({ open: false })\n        console.log(idsFromResources, \"^&^%%^%^%^%^\")\n        // await getProducts(idsFromResources)\n        this.setState({ productIDs: idsFromResources })\n        // store.set('ids', idsFromResources)\n    }\n    fetchProducts = async () => {\n        console.log(\"IN Here fetchProducts()\")\n        return await fetch('/api/products')\n            .then(res => res.json())\n            .then(response => {\n                return response\n            })\n            .catch(err => {\n                alert(err)\n                return null\n            })\n    }\n}\n\nexport default Index;\n\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}