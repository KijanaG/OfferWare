{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst dotenv = require('dotenv');\n\nconst AWS = require('aws-sdk');\n\ndotenv.config();\nAWS.config.update({\n  region: 'us-west-2',\n  credentials: {\n    accessKeyId: process.env.accessKeyId,\n    secretAccessKey: process.env.secretAccessKey\n  }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\nexport default (async (req, res) => {\n  const {\n    shopOrigin\n  } = req.cookies;\n  const {\n    method\n  } = req;\n  console.log(shopOrigin, method);\n  res.setHeader('Content-Type', 'application/json');\n\n  switch (method) {\n    case 'GET':\n      console.log(\"FETCH DB\"); // res.status(200).json({d: \"ata from DB\"})\n\n      res.send({\n        data: \"Delicious panther\"\n      });\n      break;\n\n    case 'POST':\n      console.log(\"POST DATA\\n___________________\");\n      let products = req.body.products.map(prod => {\n        delete prod.__typename;\n        delete prod.handle;\n        let images = prod.images.edges.map(img => {\n          delete img.__typename;\n          delete img.node.__typename;\n          return img;\n        });\n        prod.images = images;\n        prod.shopOrigin = shopOrigin;\n        return prod;\n      }); // await postProductstoDB(products)\n\n      console.log(products);\n      res.status(200).json({\n        p: req.body\n      });\n      break;\n\n    default:\n      res.setHeader('Allow', ['GET', 'POST']);\n      res.status(405).end(`Method ${method} Not Allowed.`);\n  }\n});\n\nasync function postProductstoDB(products) {\n  console.log(products);\n  let tempProduct = products[products.length - 1];\n  const params = {\n    TableName: 'Shopify_Products',\n    Item: _objectSpread({}, tempProduct)\n  };\n  docClient.put(params, async (err, data) => {\n    if (err) {\n      console.log(err);\n      await postProductstoDB(products);\n    } else {\n      console.log(data);\n\n      if (products.length > 0) {\n        products.pop();\n        await postProductstoDB(products);\n      }\n\n      return;\n    }\n  });\n}","map":{"version":3,"sources":["/Users/kjgarrett/Desktop/Deals/shopifyPlugin/pages/api/products/index.js"],"names":["dotenv","require","AWS","config","update","region","credentials","accessKeyId","process","env","secretAccessKey","docClient","DynamoDB","DocumentClient","req","res","shopOrigin","cookies","method","console","log","setHeader","send","data","products","body","map","prod","__typename","handle","images","edges","img","node","status","json","p","end","postProductstoDB","tempProduct","length","params","TableName","Item","put","err","pop"],"mappings":"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","sourcesContent":["const dotenv = require('dotenv');\nconst AWS = require('aws-sdk');\ndotenv.config();\nAWS.config.update({\n    region: 'us-west-2', credentials: {\n        accessKeyId: process.env.accessKeyId,\n        secretAccessKey: process.env.secretAccessKey\n    }\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\n\nexport default async (req, res) => {\n    const { shopOrigin } = req.cookies;\n    const { method } = req;\n    console.log(shopOrigin, method)\n    res.setHeader('Content-Type', 'application/json')\n\n    switch (method) {\n        case 'GET':\n            console.log(\"FETCH DB\")\n            // res.status(200).json({d: \"ata from DB\"})\n            res.send({ data: \"Delicious panther\" });\n            break;\n        case 'POST':\n            console.log(\"POST DATA\\n___________________\")\n            let products = req.body.products.map(prod => {\n                delete prod.__typename;\n                delete prod.handle;\n                let images = prod.images.edges.map(img => {\n                    delete img.__typename;\n                    delete img.node.__typename;\n                    return img;\n                })\n                prod.images = images;\n                prod.shopOrigin = shopOrigin;\n                return prod\n            })\n            // await postProductstoDB(products)\n            console.log(products)\n            res.status(200).json({ p: req.body })\n            break;\n        default:\n            res.setHeader('Allow', ['GET', 'POST'])\n            res.status(405).end(`Method ${method} Not Allowed.`)\n    }\n}\n\n\nasync function postProductstoDB(products) {\n    console.log(products)\n    let tempProduct = products[products.length - 1]\n    const params = {\n        TableName: 'Shopify_Products',\n        Item: { ...tempProduct }\n    };\n    docClient.put(params, async (err, data) => {\n        if (err) {\n            console.log(err)\n            await postProductstoDB(products)\n        } else {\n            console.log(data)\n            if (products.length > 0) {\n                products.pop();\n                await postProductstoDB(products)\n            }\n            return\n        }\n    })\n}"]},"metadata":{},"sourceType":"module"}