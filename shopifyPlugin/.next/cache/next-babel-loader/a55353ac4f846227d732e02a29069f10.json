{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Card, Form, FormLayout, Frame, Layout, Page, Subheading, TextStyle, TextField, Toast } from '@shopify/polaris';\nimport store from 'store-js';\nimport axios from 'axios';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\n\nvar EditProduct = /*#__PURE__*/function (_React$Component) {\n  _inherits(EditProduct, _React$Component);\n\n  var _super = _createSuper(EditProduct);\n\n  function EditProduct() {\n    var _this;\n\n    _classCallCheck(this, EditProduct);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      businessName: '',\n      streetAddress: '',\n      city: '',\n      zipCode: '',\n      state: '',\n      merchantDescription: '',\n      email: '',\n      errorCheck: false,\n      primaryLoad: false,\n      secondaryLoad: false,\n      showToast: false,\n      status: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (field) {\n      return function (value) {\n        return _this.setState(_defineProperty({}, field, value));\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function _callee(product) {\n      var _this$state, businessName, streetAddress, city, zipCode, state, merchantDescription, email;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                errorCheck: true\n              });\n\n              _this$state = _this.state, businessName = _this$state.businessName, streetAddress = _this$state.streetAddress, city = _this$state.city, zipCode = _this$state.zipCode, state = _this$state.state, merchantDescription = _this$state.merchantDescription, email = _this$state.email;\n              businessName = businessName.trim();\n              streetAddress = streetAddress.trim();\n              merchantDescription = merchantDescription.trim();\n              city = city.trim();\n              state = state.trim();\n\n              if (businessName.length && streetAddress.length && city.length && state.length && merchantDescription.length && zipCode && email.length) {\n                _this.setState({\n                  primaryLoad: true\n                });\n\n                axios.post('/api/map', {\n                  streetAddress: streetAddress,\n                  city: city,\n                  zipCode: zipCode,\n                  state: state\n                }).then(function (res) {\n                  var _res$data$coords = res.data.coords,\n                      lat = _res$data$coords.lat,\n                      lng = _res$data$coords.lng;\n\n                  if (!lat && !lng) {\n                    alert(\"Address did not return a lat/lng. Please edit the addess format.\");\n\n                    _this.setState({\n                      primaryLoad: false\n                    });\n\n                    return;\n                  }\n\n                  var updatedProduct = _objectSpread({}, product, {\n                    businessName: businessName,\n                    streetAddress: streetAddress,\n                    merchantDescription: merchantDescription,\n                    city: city,\n                    state: state,\n                    zipCode: zipCode,\n                    email: email,\n                    coords: {\n                      lat: lat,\n                      lng: lng\n                    }\n                  });\n\n                  axios.put('/api/products', {\n                    product: updatedProduct\n                  }).then(function (res) {\n                    _this.setState({\n                      showToast: true,\n                      status: true\n                    });\n\n                    var redirect = Redirect.create(_this.context);\n                    redirect.dispatch(Redirect.Action.APP, '/index');\n                  })[\"catch\"](function (err) {\n                    _this.setState({\n                      showToast: true,\n                      status: false,\n                      primaryLoad: false\n                    });\n                  });\n                })[\"catch\"](function (err) {\n                  console.log(err);\n                  alert(\"Address did not return a lat/lng. Please edit the addess format.\");\n                  return;\n                });\n              }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(EditProduct, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var product = store.get('product');\n      this.setState({\n        businessName: product.businessName ? product.businessName : '',\n        streetAddress: product.streetAddress ? product.streetAddress : '',\n        city: product.city ? product.city : '',\n        zipCode: product.zipCode ? product.zipCode : '',\n        state: product.state ? product.state : '',\n        merchantDescription: product.merchantDescription ? product.merchantDescription : '',\n        email: product.email ? product.email : ''\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _jsx;\n\n      var app = this.context;\n      var _this$state2 = this.state,\n          errorCheck = _this$state2.errorCheck,\n          businessName = _this$state2.businessName,\n          streetAddress = _this$state2.streetAddress,\n          city = _this$state2.city,\n          zipCode = _this$state2.zipCode,\n          status = _this$state2.status,\n          state = _this$state2.state,\n          merchantDescription = _this$state2.merchantDescription,\n          email = _this$state2.email,\n          primaryLoad = _this$state2.primaryLoad,\n          secondaryLoad = _this$state2.secondaryLoad,\n          showToast = _this$state2.showToast;\n      businessName = businessName.trim();\n      streetAddress = streetAddress.trim();\n      email = email.trim();\n      merchantDescription = merchantDescription.trim();\n      city = city.trim();\n      state = state.trim();\n      var product = store.get('product');\n\n      var redirectToHome = function redirectToHome() {\n        _this2.setState({\n          secondaryLoad: true\n        });\n\n        var redirect = Redirect.create(app);\n        redirect.dispatch(Redirect.Action.APP, '/index');\n      };\n\n      return __jsx(Frame, null, __jsx(Page, null, __jsx(Frame, null, __jsx(Layout, null, __jsx(Layout.Section, null, showToast && __jsx(Toast, {\n        content: status ? \"Successfully uploaded.\" : \"Failed To Upload, Please Try Again.\",\n        onDismiss: function onDismiss() {\n          return _this2.setState({\n            showToast: false\n          });\n        }\n      }), __jsx(Form, {\n        preventDefault: true\n      }, __jsx(Card, {\n        sectioned: true,\n        title: \"Voucher Display Form: \".concat(product ? product.title : ''),\n        secondaryFooterActions: [{\n          content: 'Return To List',\n          onAction: function onAction() {\n            redirectToHome();\n          },\n          loading: secondaryLoad\n        }],\n        primaryFooterAction: {\n          content: 'Save',\n          onAction: function onAction() {\n            _this2.handleSubmit(product);\n          },\n          loading: primaryLoad\n        }\n      }, __jsx(TextStyle, {\n        variation: \"subdued\"\n      }, \"Fill in the data below for the merchant corresponding to this product.\"), \" \", __jsx(\"br\", null), __jsx(\"br\", null), __jsx(FormLayout, null, __jsx(TextField, {\n        autoFocus: true,\n        prefix: \"\",\n        value: this.state.businessName,\n        onChange: this.handleChange('businessName'),\n        label: \"Merchant's Name \\u2013 As displayed in Google Maps\",\n        type: \"text\",\n        placeholder: \"Bob's Burger Shack\",\n        maxLength: 150,\n        error: errorCheck && !businessName.length ? \"Merchant's name is required.\" : null\n      }), __jsx(TextField, {\n        error: errorCheck && !merchantDescription.length ? \"Merchant description is required.\" : null,\n        prefix: \"\",\n        value: this.state.merchantDescription,\n        onChange: this.handleChange('merchantDescription'),\n        label: \"Merchant Description\",\n        type: \"text\",\n        maxLength: 800,\n        showCharacterCount: true,\n        spellCheck: true,\n        multiline: true,\n        placeholder: \"Bob's Burger Shack is a gourmet dine-in restaurant located in the Financial District of Downtown Seattle. They're known for...\"\n      }), __jsx(TextField, {\n        error: errorCheck && !email.length ? \"Email to customer is required.\" : null,\n        prefix: \"\",\n        value: this.state.email,\n        onChange: this.handleChange('email'),\n        label: \"Email\",\n        type: \"text\",\n        maxLength: 800,\n        showCharacterCount: true,\n        spellCheck: true,\n        multiline: true,\n        placeholder: \"Thank you for your purchase! Enjoy!\"\n      }), __jsx(Subheading, null, \"Address\"), __jsx(FormLayout.Group, {\n        condensed: true\n      }, __jsx(TextField, {\n        error: errorCheck && !streetAddress.length ? \"Street address is required.\" : null,\n        maxLength: 75,\n        prefix: \"\",\n        value: this.state.streetAddress,\n        onChange: this.handleChange('streetAddress'),\n        label: \"Street Address\",\n        type: \"text\",\n        placeholder: \"48185 Washington Blvd.\"\n      }), __jsx(TextField, (_jsx = {\n        error: errorCheck && !city.length ? \"City name is required.\" : null,\n        maxLength: 50,\n        prefix: \"\",\n        value: this.state.city,\n        onChange: this.handleChange('city'),\n        label: \"City\",\n        type: \"text\"\n      }, _defineProperty(_jsx, \"label\", \"City\"), _defineProperty(_jsx, \"placeholder\", \"Seattle\"), _jsx)), __jsx(TextField, {\n        error: errorCheck && !zipCode ? \"Zip code is required.\" : null,\n        maxLength: 5,\n        prefix: \"\",\n        label: \"Zip Code\",\n        value: this.state.zipCode,\n        onChange: this.handleChange('zipCode'),\n        placeholder: \"90210\",\n        type: \"number\"\n      }), __jsx(TextField, {\n        error: errorCheck && !state.length ? \"State is required.\" : null,\n        maxLength: 2,\n        prefix: \"\",\n        label: \"State\",\n        value: this.state.state,\n        onChange: this.handleChange('state'),\n        placeholder: \"WA\"\n      }))))))))));\n    }\n  }]);\n\n  return EditProduct;\n}(React.Component);\n\n_defineProperty(EditProduct, \"contextType\", Context);\n\nexport default EditProduct;","map":null,"metadata":{},"sourceType":"module"}