{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, Form, FormLayout, Frame, Layout, Page, Subheading, TextStyle, TextField, Toast } from '@shopify/polaris';\nimport store from 'store-js';\nimport axios from 'axios';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\n\nclass EditProduct extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      businessName: '',\n      streetAddress: '',\n      city: '',\n      zipCode: '',\n      state: '',\n      merchantDescription: '',\n      email: '',\n      errorCheck: false,\n      primaryLoad: false,\n      secondaryLoad: false,\n      showToast: false,\n      status: true\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"handleSubmit\", async product => {\n      this.setState({\n        errorCheck: true\n      });\n      let {\n        businessName,\n        streetAddress,\n        city,\n        zipCode,\n        state,\n        merchantDescription,\n        email\n      } = this.state;\n      businessName = businessName.trim();\n      streetAddress = streetAddress.trim();\n      merchantDescription = merchantDescription.trim();\n      city = city.trim();\n      state = state.trim();\n\n      if (businessName.length && streetAddress.length && city.length && state.length && merchantDescription.length && zipCode && email.length) {\n        this.setState({\n          primaryLoad: true\n        });\n        axios.post('/api/map', {\n          streetAddress,\n          city,\n          zipCode,\n          state\n        }).then(res => {\n          let {\n            lat,\n            lng\n          } = res.data.coords;\n\n          if (!lat && !lng) {\n            alert(\"Address did not return a lat/lng. Please edit the addess format.\");\n            this.setState({\n              primaryLoad: false\n            });\n            return;\n          }\n\n          let updatedProduct = _objectSpread({}, product, {\n            businessName,\n            streetAddress,\n            merchantDescription,\n            city,\n            state,\n            zipCode,\n            email,\n            coords: {\n              lat,\n              lng\n            }\n          });\n\n          axios.put('/api/products', {\n            product: updatedProduct\n          }).then(res => {\n            this.setState({\n              showToast: true,\n              status: true\n            });\n            let redirect = Redirect.create(this.context);\n            redirect.dispatch(Redirect.Action.APP, '/index');\n          }).catch(err => {\n            this.setState({\n              showToast: true,\n              status: false,\n              primaryLoad: false\n            });\n          });\n        }).catch(err => {\n          console.log(err);\n          alert(\"Address did not return a lat/lng. Please edit the addess format.\");\n          return;\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    let product = store.get('product');\n    this.setState({\n      businessName: product.businessName ? product.businessName : '',\n      streetAddress: product.streetAddress ? product.streetAddress : '',\n      city: product.city ? product.city : '',\n      zipCode: product.zipCode ? product.zipCode : '',\n      state: product.state ? product.state : '',\n      merchantDescription: product.merchantDescription ? product.merchantDescription : '',\n      email: product.email ? product.email : ''\n    });\n  }\n\n  render() {\n    const app = this.context;\n    let {\n      errorCheck,\n      businessName,\n      streetAddress,\n      city,\n      zipCode,\n      status,\n      state,\n      merchantDescription,\n      email,\n      primaryLoad,\n      secondaryLoad,\n      showToast\n    } = this.state;\n    businessName = businessName.trim();\n    streetAddress = streetAddress.trim();\n    email = email.trim();\n    merchantDescription = merchantDescription.trim();\n    city = city.trim();\n    state = state.trim();\n    const product = store.get('product');\n\n    const redirectToHome = () => {\n      this.setState({\n        secondaryLoad: true\n      });\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/index');\n    };\n\n    return __jsx(Frame, null, __jsx(Page, null, __jsx(Frame, null, __jsx(Layout, null, __jsx(Layout.Section, null, showToast && __jsx(Toast, {\n      content: status ? \"Successfully uploaded.\" : \"Failed To Upload, Please Try Again.\",\n      onDismiss: () => this.setState({\n        showToast: false\n      })\n    }), __jsx(Form, {\n      preventDefault: true\n    }, __jsx(Card, {\n      sectioned: true,\n      title: `Voucher Display Form: ${product ? product.title : ''}`,\n      secondaryFooterActions: [{\n        content: 'Return To List',\n        onAction: () => {\n          redirectToHome();\n        },\n        loading: secondaryLoad\n      }],\n      primaryFooterAction: {\n        content: 'Save',\n        onAction: () => {\n          this.handleSubmit(product);\n        },\n        loading: primaryLoad\n      }\n    }, __jsx(TextStyle, {\n      variation: \"subdued\"\n    }, \"Fill in the data below for the merchant corresponding to this product.\"), \" \", __jsx(\"br\", null), __jsx(\"br\", null), __jsx(FormLayout, null, __jsx(TextField, {\n      autoFocus: true,\n      prefix: \"\",\n      value: this.state.businessName,\n      onChange: this.handleChange('businessName'),\n      label: \"Merchant's Name \\u2013 As displayed in Google Maps\",\n      type: \"text\",\n      placeholder: \"Bob's Burger Shack\",\n      maxLength: 150,\n      error: errorCheck && !businessName.length ? \"Merchant's name is required.\" : null\n    }), __jsx(TextField, {\n      error: errorCheck && !merchantDescription.length ? \"Merchant description is required.\" : null,\n      prefix: \"\",\n      value: this.state.merchantDescription,\n      onChange: this.handleChange('merchantDescription'),\n      label: \"Merchant Description\",\n      type: \"text\",\n      maxLength: 800,\n      showCharacterCount: true,\n      spellCheck: true,\n      multiline: true,\n      placeholder: \"Bob's Burger Shack is a gourmet dine-in restaurant located in the Financial District of Downtown Seattle. They're known for...\"\n    }), __jsx(TextField, {\n      error: errorCheck && !email.length ? \"Email to customer is required.\" : null,\n      prefix: \"\",\n      value: this.state.email,\n      onChange: this.handleChange('email'),\n      label: \"Email\",\n      type: \"text\",\n      maxLength: 800,\n      showCharacterCount: true,\n      spellCheck: true,\n      multiline: true,\n      placeholder: \"Thank you for your purchase! Enjoy!\"\n    }), __jsx(Subheading, null, \"Address\"), __jsx(FormLayout.Group, {\n      condensed: true\n    }, __jsx(TextField, {\n      error: errorCheck && !streetAddress.length ? \"Street address is required.\" : null,\n      maxLength: 75,\n      prefix: \"\",\n      value: this.state.streetAddress,\n      onChange: this.handleChange('streetAddress'),\n      label: \"Street Address\",\n      type: \"text\",\n      placeholder: \"48185 Washington Blvd.\"\n    }), __jsx(TextField, {\n      error: errorCheck && !city.length ? \"City name is required.\" : null,\n      maxLength: 50,\n      prefix: \"\",\n      value: this.state.city,\n      onChange: this.handleChange('city'),\n      label: \"City\",\n      type: \"text\",\n      label: \"City\",\n      placeholder: \"Seattle\"\n    }), __jsx(TextField, {\n      error: errorCheck && !zipCode ? \"Zip code is required.\" : null,\n      maxLength: 5,\n      prefix: \"\",\n      label: \"Zip Code\",\n      value: this.state.zipCode,\n      onChange: this.handleChange('zipCode'),\n      placeholder: \"90210\",\n      type: \"number\"\n    }), __jsx(TextField, {\n      error: errorCheck && !state.length ? \"State is required.\" : null,\n      maxLength: 2,\n      prefix: \"\",\n      label: \"State\",\n      value: this.state.state,\n      onChange: this.handleChange('state'),\n      placeholder: \"WA\"\n    }))))))))));\n  }\n\n}\n\n_defineProperty(EditProduct, \"contextType\", Context);\n\nexport default EditProduct;","map":null,"metadata":{},"sourceType":"module"}