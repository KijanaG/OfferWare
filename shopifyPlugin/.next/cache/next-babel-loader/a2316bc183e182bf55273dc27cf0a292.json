{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail, Button, Form } from '@shopify/polaris';\nimport store from 'store-js';\nimport axios from 'axios';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      updating: {}\n    });\n\n    _defineProperty(this, \"handleUpload\", (id, index) => {\n      let updating = this.state.updating;\n      updating[id] = true;\n      this.setState({\n        updating: updating\n      });\n    });\n\n    _defineProperty(this, \"postProductToDB\", product => {\n      axios.patch('/api/products', {\n        product\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(async res => {\n        this.setState({\n          updating: {}\n        });\n        await this.props.fetchProducts();\n      }).catch(err => {\n        alert(\"Something went wrong, plase refresh page.\");\n      });\n    });\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    return __jsx(Card, null, __jsx(ResourceList, {\n      showHeader: true,\n      resourceName: {\n        singular: 'Product',\n        plural: 'Products'\n      },\n      items: this.props.products,\n      renderItem: (item, _, indx) => {\n        let complete = false;\n\n        if (item.streetAddress && item.city && item.email && item.zipCode && item.state && item.businessName && item.merchantDescription) {\n          complete = true;\n        }\n\n        const media = __jsx(Thumbnail, {\n          source: item.images[0] ? item.images[0].originalSrc : '',\n          alt: item.images[0] ? item.images[0].altText : ''\n        });\n\n        return __jsx(ResourceList.Item, {\n          id: item.id,\n          media: media,\n          accessibilityLabel: `View details for ${item.title}`,\n          onClick: () => {}\n        }, __jsx(Stack, null, __jsx(Stack.Item, {\n          fill: true\n        }, __jsx(\"h3\", null, \" \", __jsx(TextStyle, {\n          variation: \"strong\"\n        }, \" \", item.title, \" \"), \" \")), __jsx(Stack.Item, null, this.state.updating[item.id] ? __jsx(Query, {\n          query: GET_PRODUCT_BY_ID,\n          variables: {\n            id: [item.id]\n          }\n        }, ({\n          data,\n          loading,\n          error\n        }) => {\n          if (error) return __jsx(TextStyle, null, error.message);\n          if (data) this.postProductToDB(data.nodes[0]);\n          return __jsx(Button, {\n            loading: this.state.updating[item.id],\n            primary: true\n          }, \"Update Item\");\n        }) : __jsx(Form, {\n          onSubmit: () => this.handleUpload(item.id, indx),\n          preventDefault: true\n        }, __jsx(Button, {\n          loading: false,\n          submit: true,\n          primary: true\n        }, \"Update Item\"))), __jsx(Stack.Item, null, \"\\xA0 \", item.redeemedTotal, \"/\", item.transactionTotal, \" \\xA0\"), __jsx(Stack.Item, null, __jsx(\"div\", {\n          style: {\n            color: complete ? \"green\" : \"red\"\n          }\n        }, __jsx(Button, {\n          monochrome: true,\n          outline: true,\n          onClick: () => {\n            store.set('product', item);\n            redirectToProduct();\n          }\n        }, complete ? \" Complete \" : \"Incomplete\", \" \")))));\n      }\n    }));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;\nconst GET_PRODUCT_BY_ID = gql`\n  query getProducts($id: [ID!]!) {\n    nodes(ids: $id) {\n      ... on Product {\n        title\n        descriptionHtml\n        id\n        variants(first:4){\n          edges{\n            node{\n              compareAtPrice\n              price\n              title\n            }\n          }\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n`;","map":null,"metadata":{},"sourceType":"module"}