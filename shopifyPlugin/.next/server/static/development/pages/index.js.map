{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/ResourceList.js","webpack:///./pages/index.js","webpack:///external \"@shopify/app-bridge-react\"","webpack:///external \"@shopify/app-bridge/actions\"","webpack:///external \"@shopify/polaris\"","webpack:///external \"axios\"","webpack:///external \"graphql-tag\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"store-js\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import { Card, ResourceList, Stack, TextStyle, Thumbnail, Button, Form } from '@shopify/polaris';\nimport store from 'store-js';\nimport axios from 'axios';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nclass ResourceListWithProducts extends React.Component {\n    state = {\n        updating: {},\n    }\n    static contextType = Context;\n    handleUpload = (id, index) => {\n        let updating = this.state.updating;\n        updating[id] = true\n        this.setState({ updating: updating })\n    }\n    render() {\n        const app = this.context;\n        const redirectToProduct = () => {\n            const redirect = Redirect.create(app);\n            redirect.dispatch(\n                Redirect.Action.APP,\n                '/edit-products',\n            )\n        }\n        return (\n            <Card>\n                <ResourceList showHeader resourceName={{ singular: 'Product', plural: 'Products' }}\n                    items={this.props.products}\n                    renderItem={(item, _, indx) => {\n                        let complete = false;\n                        if (item.streetAddress && item.city && item.email && item.zipCode\n                            && item.state && item.businessName && item.merchantDescription) {\n                            complete = true\n                        }\n                        const media = (\n                            <Thumbnail\n                                source={item.images[0] ? item.images[0].originalSrc : ''}\n                                alt={item.images[0] ? item.images[0].altText : ''} />\n                        );\n                        return (\n                            <ResourceList.Item id={item.id} media={media}\n                                accessibilityLabel={`View details for ${item.title}`}\n                                onClick={() => { }}>\n                                <Stack>\n                                    <Stack.Item fill>\n                                        <h3> <TextStyle variation=\"strong\"> {item.title} </TextStyle> </h3>\n                                    </Stack.Item>\n                                    <Stack.Item>\n                                        {this.state.updating[item.id] ?\n                                            <Query query={GET_PRODUCT_BY_ID} variables={{ id: [item.id] }}>\n                                                {({ data, loading, error }) => {\n                                                    if (error) return <TextStyle>{error.message}</TextStyle>\n                                                    if (data) this.postProductToDB(data.nodes[0])\n                                                    return <Button loading={this.state.updating[item.id]} primary>Update Item</Button>\n                                                }}\n                                            </Query>\n                                            :\n                                            <Form onSubmit={() => this.handleUpload(item.id, indx)} preventDefault={true}>\n                                                <Button loading={false} submit primary>Update Item</Button>\n                                            </Form>\n                                        }\n                                    </Stack.Item>\n                                    <Stack.Item>\n                                        &nbsp; {item.redeemedTotal}/{item.transactionTotal} &nbsp;\n                                    </Stack.Item>\n                                    <Stack.Item>\n                                        <div style={{ color: complete ? \"green\" : \"red\" }}>\n                                            <Button monochrome outline onClick={() => {\n                                                store.set('product', item); redirectToProduct();\n                                            }}>{complete ? \" Complete \" : \"Incomplete\"} </Button>\n                                        </div>\n                                    </Stack.Item>\n                                </Stack>\n                            </ResourceList.Item>\n                        );\n                    }}\n                />\n            </Card>\n        );\n    }\n    postProductToDB = (product) => {\n        axios.patch('/api/products', { product }, {\n            headers: { \"Content-Type\": \"application/json\" }\n        }).then(async res => {\n            this.setState({ updating: {} })\n            await this.props.fetchProducts()\n        }).catch(err => {\n            alert(\"Something went wrong, please refresh page.\", err)\n        })\n    }\n}\n\nexport default ResourceListWithProducts;\n\nconst GET_PRODUCT_BY_ID = gql`\n  query getProducts($id: [ID!]!) {\n    nodes(ids: $id) {\n      ... on Product {\n        title\n        descriptionHtml\n        id\n        variants(first:4){\n          edges{\n            node{\n              compareAtPrice\n              price\n              title\n            }\n          }\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n`;","import { Page, Layout, TextStyle, EmptyState, Spinner } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport axios from 'axios';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport ResourceListWithProducts from '../components/ResourceList';\n\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nclass Index extends React.Component {\n    state = { open: false, loadingDB: true, products: [], productIDs: null };\n\n    async componentDidMount() {\n        this.fetchProducts();\n    }\n\n    render() {\n        const emptyState = this.state.products.length === 0;\n        const { loadingDB, productIDs } = this.state;\n        if (loadingDB) { //Fetching Products from Database \n            return (<Page>\n                <Layout>\n                    <EmptyState centeredLayout heading={'Fetching Products from Database...'}>\n                        <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />\n                    </EmptyState>\n                </Layout>\n            </Page>\n            )\n        }\n        if (productIDs) {\n            return ( //If exists, user gave Voucher functionality to these products\n                <Page>\n                    <Layout>\n                        <EmptyState centeredLayout heading={'Adding Specified Products to Database...'}>\n                            <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: productIDs }}>\n                                {({ data, loading, error }) => {\n                                    if (loading) return <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />;\n                                    if (error) return <div>{error.message}</div>\n                                    else {\n                                        this.postNewProductsToDB(data);\n                                        return <Spinner accessibilityLabel=\"Spinner\" size=\"large\" color=\"inkLightest\" />;\n                                    }\n                                }}\n                            </Query>\n                        </EmptyState>\n                    </Layout>\n                </Page>\n            )\n        }\n        return (\n            <Page>\n                <TitleBar\n                    primaryAction={{\n                        content: 'Select services',\n                        onAction: () => this.setState({ open: true })\n                    }} />\n                <ResourcePicker\n                    resourceType=\"Product\"\n                    showVariants={false}\n                    open={this.state.open}\n                    onSelection={(resources) => this.handleSelection(resources)}\n                    onCancel={() => this.setState({ open: false })}\n                />\n                {emptyState ? (\n                    <Layout>\n                        <EmptyState\n                            heading=\"Send Vouchers to your customers to be redeemed in-store.\"\n                            action={{\n                                content: 'Select Services',\n                                onAction: () => this.setState({ open: true })\n                            }}\n                            image={img} >\n                            <p>Select products/services for which to send vouchers to customers via email.</p>\n                        </EmptyState>\n                    </Layout>\n                ) : (\n                        <ResourceListWithProducts fetchProducts={this.fetchProducts} products={this.state.products} />\n                    )}\n            </Page>\n        );\n    }\n\n    postNewProductsToDB = (products) => {\n        axios.post('/api/products', { products: products.nodes }, {\n            headers: { \"Content-Type\": \"application/json\" }\n        }).then(async res => {\n            await this.fetchProducts();\n            this.setState({ productIDs: null })\n        }).catch(err => {\n            alert(\"Failed To Update Database, Please Try Again.\")\n        })\n    }\n    handleSelection = async (resources) => {\n        const idsFromResources = resources.selection.map((product) => product.id)\n        this.setState({ open: false, productIDs: idsFromResources })\n    }\n    fetchProducts = async () => {\n        return await fetch('/api/products')\n            .then(res => res.json())\n            .then(response => {\n                this.setState({ products: response.data, loadingDB: false })\n                return true\n            })\n            .catch(err => {\n                alert(err)\n                return null\n            })\n    }\n}\n\nexport default Index;\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        descriptionHtml\n        id\n        variants(first:4){\n          edges{\n            node{\n              compareAtPrice\n              price\n              title\n            }\n          }\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","module.exports = require(\"@shopify/app-bridge-react\");","module.exports = require(\"@shopify/app-bridge/actions\");","module.exports = require(\"@shopify/polaris\");","module.exports = require(\"axios\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"store-js\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AADA;AACA;AAFA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAVA;AA4EA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AApFA;AACA;AASA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAQA;AAjDA;AAqDA;AACA;AA3EA;AACA;AADA;AACA;AAsFA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AA0EA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAnFA;AAoFA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAvFA;AAwFA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAlGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAZA;AAkBA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AANA;AAWA;AAAA;AAAA;AAIA;AACA;AAxEA;AACA;AAoGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACjHA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}