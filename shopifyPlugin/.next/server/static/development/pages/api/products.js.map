{"version":3,"file":"static/development/pages/api/products.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/api/products/index.js","webpack:///external \"aws-sdk\"","webpack:///external \"dotenv\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","const dotenv = require('dotenv');\nconst AWS = require('aws-sdk');\ndotenv.config();\nAWS.config.update({ region: 'us-west-2' });\nvar docClient = new AWS.DynamoDB.DocumentClient();\n\nexport default async (req, res) => {\n    const { shopOrigin } = req.cookies;\n    res.setHeader('Content-Type', 'application/json')\n    let success = null;\n    switch (req.method) {\n        case 'GET':\n            let fetchedProducts = await fetchProductsFromDB(shopOrigin)\n            res.status(200).json({ data: fetchedProducts ? fetchedProducts : [] });\n            break;\n        case 'POST':\n            let postProducts = req.body.products.map(prod => {\n                delete prod.__typename;\n                let id_arr = prod.id.split('/')\n                prod.global_id = id_arr[id_arr.length - 1]\n                let images = prod.images.edges.map(img => {\n                    delete img.__typename;\n                    delete img.node.__typename;\n                    return img.node;\n                })\n                prod.images = images;\n                let variants = prod.variants.edges.map(variant => {\n                    delete variant.__typename;\n                    delete variant.node.__typename;\n                    return variant.node;\n                })\n                prod.variants = variants;\n                prod.shopOrigin = shopOrigin;\n                return prod\n            })\n            success = await postProductsToDB(postProducts, 'POST')\n            res.status(200).json({ success });\n            break;\n        case 'PUT':\n            success = await postProductsToDB([req.body.product], 'PUT')\n            res.status(200).json({ success })\n            break;\n        case 'PATCH':\n            success = await updateProductInDB(req.body.product, shopOrigin)\n            res.status(200).json({ success })\n            break;\n        default:\n            res.setHeader('Allow', ['GET', 'POST'])\n            res.status(405).end(`Method ${method} Not Allowed.`)\n            break;\n    }\n}\n\nasync function updateProductInDB(product, shop) {\n    let { title, descriptionHtml, images, variants, id } = product;\n    const title_params = {\n        TableName: 'Shopify_Products',\n        FilterExpression: 'shopOrigin = :shop and id = :id',\n        ExpressionAttributeValues: { ':shop': shop, ':id': id }\n    }\n    let awsRequest = docClient.scan(title_params);\n    let result = await awsRequest.promise();\n    let updatedProduct = null;\n    if (result.Items.length > 0) {\n        updatedProduct = { ...result.Items[0], title, descriptionHtml }\n        await updateDB(updatedProduct, images, variants)\n        return true\n    }\n}\n\nasync function updateDB(updatedProduct, images, variants) {\n    let newImages = [];\n    for (let image of images.edges)\n        newImages.push({ 'altText': image.node.altText, 'originalSrc': image.node.originalSrc })\n    updatedProduct.images = newImages;\n    let newVariants = [];\n    for (let variant of variants.edges)\n        newVariants.push({ 'title': variant.node.title, 'price': variant.node.price, 'compareAtPrice': variant.node.compareAtPrice })\n    updatedProduct.variants = newVariants\n    let updated_params = {\n        TableName: 'Shopify_Products',\n        Item: updatedProduct\n    }\n    let awsReq = await docClient.put(updated_params);\n    let res = awsReq.promise();\n    return;\n}\n\nasync function fetchProductsFromDB(shopOrigin, count = 0) {\n    const params = {\n        TableName: 'Shopify_Products',\n        FilterExpression: \"shopOrigin = :shop\",\n        ExpressionAttributeValues: { ':shop': shopOrigin }\n    }\n    const awsRequest = await docClient.scan(params);\n    const result = await awsRequest.promise();\n    if (result.Items.length > 0)\n        return result.Items;\n    else {\n        if (count == 3) return null\n        await fetchProductsFromDB(shopOrigin, ++count)\n    }\n}\n\nasync function postProductsToDB(products, method, count = 0) {\n    if (products.length == 0) return true;\n    let Item = { ...products[products.length - 1], updatedAt: Date.now() }\n    if (method == 'POST') {\n        Item = {\n            ...Item, streetAddress: null, city: null, zipCode: null, state: null, \n            transactionTotal: 0, businessName: null, merchantDescription: null, \n            email: null, createdAt: Date.now(), redeemedTotal: 0\n        }\n    }\n    const params = { TableName: 'Shopify_Products', Item }\n    docClient.put(params, async (err, data) => {\n        if (err) {\n            if (count == 5) return false;\n            await postProductsToDB(products, method, ++count)\n        } else {\n            if (products.length > 0) {\n                products.pop();\n                await postProductsToDB(products, method, count)\n            }\n            return true\n        }\n    })\n}","module.exports = require(\"aws-sdk\");","module.exports = require(\"dotenv\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAvCA;AAyCA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC/HA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}